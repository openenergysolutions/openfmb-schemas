syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (w ShuntModule + new status points).eap
// Friday, November 15, 2019 1:44:21 PM UTC

package commonmodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/openfmb/commonmodule";
option java_package = "openfmb.commonmodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.commonmodule";

import "uml.proto";
import "google/protobuf/wrappers.proto";

// This is a root class to provide common identification for all classes needing identification and
// naming attributes.
message IdentifiedObject
{
    // MISSING DOCUMENTATION!!!
    google.protobuf.StringValue description = 1;
    // Master resource identifier issued by a model authority. The mRID must semantically be a UUID as
    // specified in RFC 4122. The mRID is globally unique.
    google.protobuf.StringValue mRID = 2 [(uml.option_uuid) = true];
    // The name is any free human readable and possibly non unique text naming the object.
    google.protobuf.StringValue name = 3;
}

// An electrical connection point (AC or DC) to a piece of conducting equipment. Terminals are
// connected at physical connection points called connectivity nodes.
message ACDCTerminal
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
    // The connected status is related to a bus-branch model and the topological node to terminal
    // relation.  True implies the terminal is connected to the related topological node and false implies
    // it is not.  In a bus-branch model, the connected status is used to tell if equipment is disconnected
    // without having to change the connectivity described by the topological node to terminal relation. A
    // valid case is that conducting equipment can be connected in one end and open in the other. In
    // particular for an AC line segment, where the reactive line charging can be significant, this is a
    // relevant case.
    google.protobuf.BoolValue connected = 2;
    // The orientation of the terminal connections for a multiple terminal conducting equipment.  The
    // sequence numbering starts with 1 and additional terminals should follow in increasing order.   The
    // first terminal is the "starting point" for a two terminal branch.
    google.protobuf.Int32Value sequenceNumber = 3;
}

// The units defined for usage in the CIM.
enum UnitSymbolKind
{
    // Dimension less quantity, e.g. count, per unit, etc.
     UnitSymbolKind_none = 0;
    // Length in meter.
     UnitSymbolKind_meter = 2;
    // Mass in gram.
     UnitSymbolKind_gram = 3;
    // Current in ampere.
     UnitSymbolKind_Amp = 5;
    // Plane angle in degrees.
     UnitSymbolKind_deg = 9;
    // Plane angle in radians.
     UnitSymbolKind_rad = 10;
    // Relative temperature in degrees Celsius. In the SI unit system the symbol is ºC. Electric charge
    // is measured in coulomb that has the unit symbol C. To distinguish degree Celsius form coulomb the
    // symbol used in the UML is degC. Reason for not using ºC is the special character º is difficult to
    // manage in software.
     UnitSymbolKind_degC = 23;
    // Capacitance in farad.
     UnitSymbolKind_Farad = 25;
    // Time in seconds.
     UnitSymbolKind_sec = 27;
    // Inductance in Henry.
     UnitSymbolKind_Henry = 28;
    // Voltage in volt.
     UnitSymbolKind_V = 29;
    // Resistance in ohm.
     UnitSymbolKind_ohm = 30;
    // Energy in joule.
     UnitSymbolKind_Joule = 31;
    // Force in newton.
     UnitSymbolKind_Newton = 32;
    // Frequency in hertz.
     UnitSymbolKind_Hz = 33;
    // Active power in watt.
     UnitSymbolKind_W = 38;
    // Pressure in pascal (n/m2).
     UnitSymbolKind_Pa = 39;
    // Area in square meters.
     UnitSymbolKind_m2 = 41;
    // Conductance in siemens.
     UnitSymbolKind_Siemens = 53;
    // Apparent power in volt ampere.
     UnitSymbolKind_VA = 61;
    // Reactive power in volt ampere reactive.
     UnitSymbolKind_VAr = 63;
    // Power factor
     UnitSymbolKind_wPerVA = 65;
    // Apparent energy in volt ampere hours.
     UnitSymbolKind_VAh = 71;
    // Real energy in what hours.
     UnitSymbolKind_Wh = 72;
    // Reactive energy in volt ampere reactive hours.
     UnitSymbolKind_VArh = 73;
    // MISSING DOCUMENTATION!!!
     UnitSymbolKind_hzPerS = 75;
    // MISSING DOCUMENTATION!!!
     UnitSymbolKind_wPerS = 81;
    // Other enum not listed
     UnitSymbolKind_other = 100;
    // Amp hour
     UnitSymbolKind_Ah = 106;
    // Time in minutes.
     UnitSymbolKind_min = 159;
    // Time in hours.
     UnitSymbolKind_hour = 160;
    // Volume in cubic meters.
     UnitSymbolKind_m3 = 166;
    // Watts per square meter
     UnitSymbolKind_wPerM2 = 179;
    // Relative temperature in degree fahrenheit.
     UnitSymbolKind_degF = 279;
    // Mile per hour
     UnitSymbolKind_mph = 500;
}

message Optional_UnitSymbolKind
{
    UnitSymbolKind value = 1;
}

// The unit multipliers defined for the CIM.
enum UnitMultiplierKind
{
    // No multiplier or equivalently multiply by 1.
     UnitMultiplierKind_none = 0;
    // Other enum not listed
     UnitMultiplierKind_other = 1;
    // Centi 10**-2.
     UnitMultiplierKind_centi = 2;
    // Deci 10**-1.
     UnitMultiplierKind_deci = 3;
    // Giga 10**9.
     UnitMultiplierKind_Giga = 4;
    // Kilo 10**3.
     UnitMultiplierKind_kilo = 5;
    // Mega 10**6.
     UnitMultiplierKind_Mega = 6;
    // Micro 10**-6.
     UnitMultiplierKind_micro = 7;
    // Milli 10**-3.
     UnitMultiplierKind_milli = 8;
    // Nano 10**-9.
     UnitMultiplierKind_nano = 9;
    // Pico 10**-12.
     UnitMultiplierKind_pico = 10;
    // Tera 10**12.
     UnitMultiplierKind_Tera = 11;
}

message Optional_UnitMultiplierKind
{
    UnitMultiplierKind value = 1;
}

// MISSING DOCUMENTATION!!!
message ActivePower
{
    // MISSING DOCUMENTATION!!!
    Optional_UnitMultiplierKind multiplier = 1;
    // MISSING DOCUMENTATION!!!
    Optional_UnitSymbolKind unit = 2;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue value = 3;
}

// Enumeration of phase identifiers. Allows designation of phases for both transmission and
// distribution equipment, circuits and loads. Residential and small commercial loads are often served
// from single-phase, or split-phase, secondary circuits. For example of s12N, phases 1 and 2 refer to
// hot wires that are 180 degrees out of phase, while N refers to the neutral wire. Through single
// phase transformer connections, these secondary circuits may be served from one or two of the primary
// phases A, B, and C. For three-phase loads, use the A, B, C phase codes instead of s12N.
enum PhaseCodeKind
{
    // Not applicable
     PhaseCodeKind_none = 0;
    // Other enum not listed
     PhaseCodeKind_other = 1;
    // Neutral phase.
     PhaseCodeKind_N = 16;
    // Phase C.
     PhaseCodeKind_C = 32;
    // Phases C and neutral.
     PhaseCodeKind_CN = 33;
    // Phases A and C.
     PhaseCodeKind_AC = 40;
    // Phases A, C and neutral.
     PhaseCodeKind_ACN = 41;
    // Phase B.
     PhaseCodeKind_B = 64;
    // Phases B and neutral.
     PhaseCodeKind_BN = 65;
    // Phases B and C.
     PhaseCodeKind_BC = 66;
    // Phases B, C, and neutral.
     PhaseCodeKind_BCN = 97;
    // Phase A.
     PhaseCodeKind_A = 128;
    // Phases A and neutral.
     PhaseCodeKind_AN = 129;
    // Phases A and B.
     PhaseCodeKind_AB = 132;
    // Phases A, B, and neutral.
     PhaseCodeKind_ABN = 193;
    // Phases A, B, and C.
     PhaseCodeKind_ABC = 224;
    // Phases A, B, C, and N.
     PhaseCodeKind_ABCN = 225;
    // Secondary phase 2.
     PhaseCodeKind_s2 = 256;
    // Secondary phase 2 and neutral.
     PhaseCodeKind_s2N = 257;
    // Secondary phase 1.
     PhaseCodeKind_s1 = 512;
    // Secondary phase 1 and neutral.
     PhaseCodeKind_s1N = 513;
    // Secondary phase 1 and 2.
     PhaseCodeKind_s12 = 768;
    // Secondary phases 1, 2, and neutral.
     PhaseCodeKind_s12N = 769;
}

message Optional_PhaseCodeKind
{
    PhaseCodeKind value = 1;
}

// Analogue value (AnalogueValue)
message AnalogueValue
{
    // Floating point representation of the measured value. The formula to convert between 'f' and the
    // process value (pVal) shall be: <i>pVal</i>='f'*10exp('Unit.multiplier') in ['Unit.SIUnit'].
    google.protobuf.FloatValue f = 1;
    // Integer representation of the measured value. The formula to convert between 'i' and the process
    // value (pVal) shall be: <i>pVal</i>=(('i'*'ScaledValueConfig.scaleFactor')+'ScaledValueConfig.offset'
    //  in ['Unit.SIUnit'].
    google.protobuf.Int32Value i = 2;
}

// Validity of the value, as condensed information for the client. In case this value is not
// 'good', some reasons may be found in the 'detailQual'.
enum ValidityKind
{
    // Supervision function has detected no abnormal condition of either the acquisition function or
    // the information source.
     ValidityKind_good = 0;
    // Supervision function has detected an abnormal condition of the acquisition function or the
    // information source (missing or non-operating updating devices). The value is not defined under this
    // condition. It shall be used to indicate to the client that the value may be incorrect and shall not
    // be used.  EXAMPLE If an input unit detects an oscillation of one input it will mark the related
    // information as invalid.
     ValidityKind_invalid = 1;
    // Reserved
     ValidityKind_reserved = 2;
    // Supervision function has detected any abnormal behaviour. However, the value could still be
    // valid. It is client's responsibility to determine whether the values should be used.
     ValidityKind_questionable = 3;
}

message Optional_ValidityKind
{
    ValidityKind value = 1;
}

// Describes some reasons in case 'validity' is not 'good'.
message DetailQual
{
    // (default=false) If true, the value may not be a correct value due to a reference being out of
    // calibration. The server shall decide if validity shall be set to invalid or questionable (used for
    // measurand information and binary counter information only).
    bool badReference = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, a supervision function has detected an internal or external failure.
    bool failure = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, the value does not meet the stated accuracy of the source. EXAMPLE The
    // measured value of power factor may be noisy (inaccurate) when the current is very small.
    bool inaccurate = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, an evaluation function has detected an inconsistency.
    bool inconsistent = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, an update is not made during a specific time interval. The value may be
    // an old value that may have changed in the meantime. This specific time interval may be defined by an
    // allowed-age attribute. NOTE "Fail silent" errors, where the equipment stops sending data, will cause
    // setting this flag to true. In this case, the last received information was correct.
    bool oldData = 5 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) To prevent overloading of event driven communication channels, it is desirable
    // to detect and suppress oscillating (fast changing) binary inputs. If a signal changes in a defined
    // time (tosc) twice in the same direction (from 0 to 1 or from 1 to 0), then it shall be defined as an
    // oscillation and this attribute shall be set to true. If a configured number of transient changes is
    // detected, they shall be suppressed. In this time, the 'Quality.validity' shall be set to
    // 'questionable'. If the signal is still in the oscillating state after the defined number of changes,
    // the value shall be left in the state it was in when this flag was set. In this case, the 'Quality
    // validity' shall be changed from 'questionable' to 'invalid' and kept so as long as the signal is
    // oscillating.  If the configuration is such that all transient changes should be suppressed, the
    // 'Quality.validity' shall be set immediately to 'invalid' and this flag to true (used for status
    // information only).
    bool oscillatory = 6 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, the attribute to which the quality has been associated is beyond a
    // predefined range of values. The server shall decide if validity shall be set to invalid or
    // questionable (used for measurand information only). EXAMPLE A measured value may exceed a predefined
    // range, however the selected data type can still represent the value, for example the data type is a
    // 16-bit unsigned integer, the predefined range is 0 to 40 000, if the value is between 40 001 and 65
    // 535 it is considered to be out of range.
    bool outOfRange = 7 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, the value of the attribute to which the quality has been associated is
    // beyond the capability of being represented properly (used for measurand information only). EXAMPLE A
    // measured value may exceed the range that may be represented by the selected data type, for example
    // the data type is a 16-bit unsigned integer and the value exceeds 65 535.
    bool overflow = 8 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// (default=process) Defines the source of a value. NOTE 1 Substitution may be done locally or via
// the communication services. In the second case, specific attributes with a FC=SV are used. NOTE 2
// There are various means to clear a substitution. As an example, a substitution that was done
// following an invalid condition may be cleared automatically if the invalid condition is cleared.
// However, this is a local issue and therefore
enum SourceKind
{
    // The value is provided by an input function from the process I/O or is calculated from some
    // application function.
     SourceKind_process = 0;
    // The value is provided by an operator input or by an automatic source.
     SourceKind_substituted = 1;
}

message Optional_SourceKind
{
    SourceKind value = 1;
}

// Quality contains data that describe the quality of the data from the server. Quality of the data
// is also related to the mode of a logical node. Further details can be found in IEC 61850-7-4. The
// different quality attributes are <i>not</i> independent.The default value shall be applied if the
// functionality of the related attribute is not supported. The mapping may specify to exclude the
// attribute from the message if it is not supported or if the default value applies.
message Quality
{
    // Describes some reasons in case 'validity' is not 'good'.
    DetailQual detailQual = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, further update of the value has been blocked by an operator. The value
    // shall be the information that was acquired before blocking. If this flag is set, then the
    // 'detailQual.oldData' shall also be set. The operator shall use the data attribute 'CDC.blkEna' to
    // block the update of the value. NOTE Both an operator as well as an automatic function may freeze
    // communication updating as well as input updating. In both cases, 'detailQual.oldData' will be set.
    // If the blocking is done by an operator, then this flag is set additionally, and an operator activity
    // is required to clear the condition.
    bool operatorBlocked = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=process) Defines the source of a value. NOTE 1 Substitution may be done locally or via
    // the communication services. In the second case, specific attributes with a FC=SV are used. NOTE 2
    // There are various means to clear a substitution. As an example, a substitution that was done
    // following an invalid condition may be cleared automatically if the invalid condition is cleared.
    // However, this is a local issue and therefore not within the scope of this standard.
    SourceKind source = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (default=false) If true, the value is a test value. The processing of the test quality in the
    // client shall be as described in IEC 61850-7-4. This bit shall be completely independent from the
    // other bits within the quality descriptor.
    bool test = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Validity of the value, as condensed information for the client. In case this value is not
    // 'good', some reasons may be found in the 'detailQual'.
    ValidityKind validity = 5 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Validity of the value, as condensed information for the client. In case this value is not
// 'good', some reasons may be found in the 'detailQual'.
enum TimeAccuracyKind
{
    // Undefined
     TimeAccuracyKind_UNDEFINED = 0;
    // 10 ms (class T0)
     TimeAccuracyKind_T0 = 7;
    // 1 ms (class T1)
     TimeAccuracyKind_T1 = 10;
    // 100 us (class T2)
     TimeAccuracyKind_T2 = 14;
    // 25 us (class T3)
     TimeAccuracyKind_T3 = 16;
    // 4 us (class T4)
     TimeAccuracyKind_T4 = 18;
    // 1 us (class T5)
     TimeAccuracyKind_T5 = 20;
    // Undefined
     TimeAccuracyKind_unspecified = 31;
}

message Optional_TimeAccuracyKind
{
    TimeAccuracyKind value = 1;
}

// Information about the quality of the time source of the sending IED.
message TimeQuality
{
    // If true, the time source of the sending device is unreliable and the value of the time stamp
    // shall be ignored.
    bool clockFailure = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // If true, the time source of the sending device is not synchronised with the external UTC time.
    bool clockNotSynchronized = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // If true, the value in 'P_Timestamp.SecondSinceEpoch' contains all leap seconds occurred.
    // Otherwise, it does not take into account the leap seconds that occurred before the initialization of
    // the time source of the device. Instead, the seconds since start of the epoch are calculated from the
    // current date assuming a constant day length of 86 400 seconds. Note: If a UTC time master clock is
    // used and accessible, this value should always be true.
    bool leapSecondsKnown = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Information about the quality of the time source of the sending IED.
    TimeAccuracyKind timeAccuracy = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// UTC time with the epoch of midnight (00:00:00) of 1970-01-01. The presentation is defined in the
// SCSMs.The NULL time stamp has all fields set to 0 (zero).The relation between a timestamp value, the
// synchronization of an internal time with an external time source (for example, UTC time), and other
// information related to time model are available as requirements in Clause 21.
message Timestamp
{
    // Fractional of the current second when the value of time stamp has been determined. It shall be
    // calculated as (SUM from i=0 to 31 of bi*2**-(i+1)).
    uint32 fraction = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Second since epoch (1970-01-01T00:00:00Z)
    uint64 seconds = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // IEC61850 time quality
    TimeQuality tq = 3;
}

// Unit definition (Unit)
message Unit
{
    // (default='') Unit multiplier.
    Optional_UnitMultiplierKind multiplier = 1;
    // SI unit of measure.
    UnitSymbolKind SIUnit = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Measured value (MV)
message MV
{
    // Value of the magnitude based on a deadband calculation from the instantaneous value 'instMag'.
    // The value of 'mag' shall be updated to the current instantaneous value 'instMag' when the value has
    // changed according to the configuration parameter 'db'. If 'db'=0, 'mag'='instMag'.NOTE 1 This value
    // is typically used to create reports for analogue values. Such a report sent "by exception" is not
    // comparable to the transfer of sampled measured values as supported by the CDC SAV.NOTE 2 This 'mag'
    // is not the same as 'mag' of the constructed attribute class 'Vector'.
    AnalogueValue mag = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Quality of the values in 'instMag', 'mag', 'range'.
    Quality q = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last refresh of the value in 'mag' or of the last change of the value in any of
    // 'range' or 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Unit for: 'instMag', 'mag', 'subMag', 'rangeC'.
    Unit units = 4;
}

// IEC61850 logical node.
message LogicalNode
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
}

// LN: Generic process I/O   Name: GGIO
message AnalogStatusGGIO
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // Generic analogue input <i>n</i>.
    MV AnIn = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Phase code
    Optional_PhaseCodeKind Phase = 3;
}

// Analogue value control (AnalogueValueCtl)
message AnalogueValueCtl
{
    // Floating point representation of the measured value.  See 'AnalogueValue.f'.
    google.protobuf.FloatValue f = 1;
    // Integer representation of the measured value. See 'AnalogueValue.i'.
    google.protobuf.Int32Value i = 2;
}

// This is a root class similar to IdentifiedObject but without the mRID. The reason to separate
// the two classes is because the mRID may need to be defined as a separate key field for technology
// such as the DDS implementation.
message NamedObject
{
    // MISSING DOCUMENTATION!!!
    google.protobuf.StringValue description = 1;
    // The name is any free human readable and possibly non unique text naming the object.
    google.protobuf.StringValue name = 2;
}

// The parts of a power system that are physical devices, electronic or mechanical.
message ApplicationSystem
{
    // UML inherited base object
    NamedObject namedObject = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    string mRID = 2 [(uml.option_uuid) = true, (uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Analogue setting (FC=SP) (ASG_SP)
message ASG
{
    // The value of the analogue setting.
    AnalogueValueCtl setMag = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Unit for 'setMag', 'minVal', 'maxVal', 'stepSize'.
    Unit units = 2;
}

// Binary counter reading (BCR)
message BCR
{
    // Binary counter status represented as an integer value; wraps to 0 at the maximum or minimum
    // value of INT64.
    int64 actVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Quality of the values in 'actVal', 'frVal'.
    Quality q = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change of value in 'actVal' or 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Unit for value in 'pulsQty'.
    Optional_UnitSymbolKind units = 4;
}

// Specialized 61850 SPS class
message StatusSPS
{
    // MISSING DOCUMENTATION!!!
    Quality q = 1;
    // MISSING DOCUMENTATION!!!
    bool stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    Timestamp t = 3;
}

// LN: Generic process I/O   Name: GGIO
message BooleanStatusGGIO
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // If true, indication <i>n</i> is present.
    StatusSPS Ind = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Phase code
    Optional_PhaseCodeKind Phase = 3;
}

// IEC61850-7-2 Service parameter for conditions checking
message CheckConditions
{
    // InterlockCheck is used for the device to be controlled to check if other devices are in proper
    // state for the control command.  One example is that 2 circuit breakers on a busbar need to be
    // interlocked so one is open and one is closed, but not both on.
    google.protobuf.BoolValue interlockCheck = 1;
    // To check if a device is synchrous to the system.
    google.protobuf.BoolValue synchroCheck = 2;
}

// Vector definition (Vector)
message Vector
{
    // (range=[-180...180]) Angle of the complex value (Unit.SIUnit='deg' and Unit.multiplier='');
    // angle reference is defined in the context where this type is used.
    AnalogueValue ang = 1;
    // Magnitude of the complex value.
    AnalogueValue mag = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Complex measured value (CMV)
message CMV
{
    // Complex value based on a deadband calculation from the instantaneous value 'instCVal.mag'. The
    // deadband calculation is done both on 'instCVal.mag' (based on 'db') and on 'instCVal.ang' (based on
    // 'dbAng'), independently. See  'MV.mag'.
    Vector cVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Quality of the values in 'instCVal', 'cVal', 'range', ‘rangeAng’.
    Quality q = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last refresh of the value in 'cVal' or of the last change of the value in any
    // of 'range', 'rangeAng' or 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Units for: 'instCVal.mag', 'cVal.mag', 'subCVal.mag', 'rangeC'.
    Unit units = 4;
}

// Asset representation of a ConductingEquipment.
message ConductingEquipment
{
    // UML inherited base object
    NamedObject namedObject = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    string mRID = 2 [(uml.option_key) = true, (uml.option_uuid) = true, (uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// An AC electrical connection point to a piece of conducting equipment. Terminals are connected at
// physical connection points called connectivity nodes.
message Terminal
{
    // UML inherited base object
    ACDCTerminal aCDCTerminal = 1 [(uml.option_parent_message) = true];
    // Represents the normal network phasing condition. If the attribute is missing three phases (ABC
    // or ABCN) shall be assumed.
    Optional_PhaseCodeKind phases = 2;
}

// Reading associated with an equipment such as a recloser.
message ConductingEquipmentTerminalReading
{
    // MISSING DOCUMENTATION!!!
    Terminal terminal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Specialized DPC 61850 CDC class
message ControlDPC
{
    // Service parameter that determines the control activity ('false' for off, 'true' for on).
    bool ctlVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// UTC time with the epoch of midnight (00:00:00) of 1970-01-01. The presentation is defined in the
// SCSMs.The NULL time stamp has all fields set to 0 (zero).The relation between a timestamp value, the
// synchronization of an internal time with an external time source (for example, UTC time), and other
// information related to time model are available as requirements in Clause 21.  ControlTimestamp is a
// timestamp for future time point so it does not contain the time quality as the one contained in the
// normal Timestamp data type.
message ControlTimestamp
{
    // Fractional of the current second when the value of time stamp has been determined. It shall be
    // calculated as (SUM from i=0 to 31 of bi*2**-(i+1)).
    uint32 fraction = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Second since epoch (1970-01-01T00:00:00Z)
    uint64 seconds = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// ESS function kind
enum ScheduleParameterKind
{
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_none = 0;
    // Other enum not listed
     ScheduleParameterKind_other = 1;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_A_net_mag = 2;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_A_neut_mag = 3;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_A_phsA_mag = 4;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_A_phsB_mag = 5;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_A_phsC_mag = 6;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_Hz_mag = 7;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PF_net_mag = 8;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PF_neut_mag = 9;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PF_phsA_mag = 10;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PF_phsB_mag = 11;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PF_phsC_mag = 12;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_net_ang = 13;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_net_mag = 14;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_neut_ang = 15;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_neut_mag = 16;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_phsA_ang = 17;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_phsA_mag = 18;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_phsB_ang = 19;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_phsB_mag = 20;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_phsC_ang = 21;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PhV_phsC_mag = 22;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PPV_phsAB_ang = 23;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PPV_phsAB_mag = 24;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PPV_phsBC_ang = 25;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PPV_phsBC_mag = 26;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PPV_phsCA_ang = 27;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_PPV_phsCA_mag = 28;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VA_net_mag = 29;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VA_neut_mag = 30;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VA_phsA_mag = 31;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VA_phsB_mag = 32;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VA_phsC_mag = 33;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VAr_net_mag = 34;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VAr_neut_mag = 35;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VAr_phsA_mag = 36;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VAr_phsB_mag = 37;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_VAr_phsC_mag = 38;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_W_net_mag = 39;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_W_neut_mag = 40;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_W_phsA_mag = 41;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_W_phsB_mag = 42;
    // MISSING DOCUMENTATION!!!
     ScheduleParameterKind_W_phsC_mag = 43;
}

message Optional_ScheduleParameterKind
{
    ScheduleParameterKind value = 1;
}

// Grid connect mode kind
message ENG_ScheduleParameter
{
    // Schedule parameter type
    ScheduleParameterKind scheduleParameterType = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    float value = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Point definition (Point)
message SchedulePoint
{
    // Schedule parameter
    repeated ENG_ScheduleParameter scheduleParameter = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Start time
    ControlTimestamp startTime = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Curve shape setting (FC=SP) (CSG_SP)
message ScheduleCSG
{
    // The array with the points specifying a time schedule
    repeated SchedulePoint schPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message ControlScheduleFSCH
{
    // Analog CSG
    ScheduleCSG ValACSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for logical node control
message LogicalNodeForControl
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
}

// LN: Schedule controller   Name: FSCC  F:    Function (generic) SC:  Schedule Controller C:   
// Control (execution)
message ControlFSCC
{
    // UML inherited base object
    LogicalNodeForControl logicalNodeForControl = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ControlScheduleFSCH controlScheduleFSCH = 2;
    // MISSING DOCUMENTATION!!!
    ControlScheduleFSCH islandControlScheduleFSCH = 3;
}

// Integer status setting (FC=SP) (ING_SP)
message ControlING
{
    // The value of the status setting.
    int32 setVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Unit for 'setVal', 'minVal', 'maxVal', 'stepSize'.
    Unit units = 2;
}

// &lt;&lt;statistics&gt;&gt; Integer controlled step position information (ISC)
message ControlISC
{
    // Service parameter that determines the control activity.
    int32 ctlVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Generic control message info.
message MessageInfo
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    Timestamp messageTimeStamp = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Generic control message info.
message ControlMessageInfo
{
    // UML inherited base object
    MessageInfo messageInfo = 1 [(uml.option_parent_message) = true];
}

// Controllable single point (SPC)
message ControlSPC
{
    // Service parameter that determines the control activity ('false' for off or deactivation, 'true'
    // for on or activation).
    bool ctlVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// The value of a control command which could either be a setpoint or a control schedule in curve. 
// The attribute modBlk is used to tag out a device. if it is TRUE, any setpoints and control schedule
// in a message payload should be ignored.   It should also be presented in a status profile.  Any
// modBlk value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
message ControlValue
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
    // The attribute modBlk is used to tag out a device. if it is TRUE, any setpoints and control
    // schedule in a message payload should be ignored.   It should also be presented in a status profile. 
    // Any modBlk value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
    google.protobuf.BoolValue modBlk = 2;
}

// Interval between two date and time points.
message DateTimeInterval
{
    // End date and time of this interval.
    google.protobuf.Int64Value end = 1;
    // Start date and time of this interval.
    google.protobuf.Int64Value start = 2;
}

// Phase to phase related measured values of a three-phase system (DEL)
message DEL
{
    // Value of phase A to phase B measurement.
    CMV phsAB = 1;
    // Value of phase B to phase C measurement.
    CMV phsBC = 2;
    // Value of phase C to phase A measurement.
    CMV phsCA = 3;
}

// Generic control for switch, recloser and breaker.
message DeviceControl
{
    // UML inherited base object
    LogicalNodeForControl logicalNodeForControl = 1 [(uml.option_parent_message) = true];
    // ANSI 79 - AC Reclosing Relay / Auto Reclose
    ControlSPC ANSI79LO = 2;
    // Fault latch: LT01=51A OR 51B OR 51C
    ControlSPC FaultLatch = 3;
    // True if hot line tag added
    ControlSPC HotLineTag = 4;
    // True if there is an IED trouble.
    ControlSPC IEDTrouble = 5;
    // Reclose enabled
    ControlSPC RecloseEnabled = 6;
}

// Behaviour or mode (BehaviourModeKind enumeration)
enum BehaviourModeKind
{
    // Undefined
     BehaviourModeKind_UNDEFINED = 0;
    // Normal enabled state.
     BehaviourModeKind_on = 1;
    // Process is passively supervised.
     BehaviourModeKind_blocked = 2;
    // Function is operated but results are indicated as test results.
     BehaviourModeKind_test = 3;
    // Function is operated in test mode, but with no impact to the process.
     BehaviourModeKind_test_blocked = 4;
    // Function is inactive but shows its configuration capability.
     BehaviourModeKind_off = 5;
}

message Optional_BehaviourModeKind
{
    BehaviourModeKind value = 1;
}

// Behavior mode kind. ENS stands for Enumerated status
message ENS_BehaviourModeKind
{
    // Quality of the value in 'stVal'.
    Quality q = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Value of the data.
    BehaviourModeKind stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// State kind
enum HealthKind
{
    // MISSING DOCUMENTATION!!!
     HealthKind_none = 0;
    // No problems, normal operation ("green").
     HealthKind_OK = 1;
    // Minor problems, but in safe operating mode ("yellow"). The exact meaning is a local issue,
    // depending on the dedicated function/device.
     HealthKind_Warning = 2;
    // Severe problem, no operation possible ("red").
     HealthKind_Alarm = 3;
}

message Optional_HealthKind
{
    HealthKind value = 1;
}

// &lt;&gt; Enumerated status (ENS)
message ENS_HealthKind
{
    // Textual description of the data. In case it is used within the CDC LPL, the description refers
    // to the logical node.
    google.protobuf.StringValue d = 1;
    // Value of the data.
    HealthKind stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Logical node for event and status
message LogicalNodeForEventAndStatus
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // Behavior of the function
    ENS_BehaviourModeKind Beh = 2;
    // Asset health
    ENS_HealthKind EEHealth = 3;
}

// Generic status for switch, recloser and breaker.
message DeviceStatus
{
    // UML inherited base object
    LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // ANSI 79 - AC Reclosing Relay / Auto Reclose
    StatusSPS ANSI79LO = 2;
    // Fault latch: LT01=51A OR 51B OR 51C
    StatusSPS FaultLatch = 3;
    // True if hot line tag added
    StatusSPS HotLineTag = 4;
    // True if there is an IED trouble.
    StatusSPS IEDTrouble = 5;
    // Reclose enabled
    StatusSPS RecloseEnabled = 6;
    // Remote enabled
    StatusSPS RemoteEnabled = 7;
}

// Generic user of energy - a  point of consumption on the power system model.
message EnergyConsumer
{
    // UML inherited base object
    ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    google.protobuf.StringValue operatingLimit = 2;
}

// Calculation method (CalcMethodKind enumeration)
enum CalcMethodKind
{
    // Undefined enum value which can be used for Protobuf generation and be consistent with other
    // technologies.
     CalcMethodKind_UNDEFINED = 0;
    // All analogue values (i.e., all common attributes 'i' and 'f') meet the sampling and filtering
    // characteristics specified in IEEE C37.118.1 for P-CLASS.
     CalcMethodKind_P_CLASS = 11;
    // All analogue values (i.e., all common attributes 'i' and 'f') meet the sampling and filtering
    // characteristics specified in IEEE C37.118.1 for M-CLASS.
     CalcMethodKind_M_CLASS = 12;
    // All analogue values are [F(t+T)-F(t)] for a calculation interval T (in the same unit as the
    // original entity). Note: The client can still calculate rate so: RATE = DIFF/T.
     CalcMethodKind_DIFF = 13;
}

message Optional_CalcMethodKind
{
    CalcMethodKind value = 1;
}

// Calc method kind
message ENG_CalcMethodKind
{
    // The value of the status setting.
    CalcMethodKind setVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Power system connect modes to the power grid (GridConnectModeKind)
enum GridConnectModeKind
{
    // Undefined
     GridConnectModeKind_UNDEFINED = 0;
    // Current-source inverter (CSI)
     GridConnectModeKind_CSI = 1;
    // Voltage-controlled voltage-source inverter (VC-VSI)
     GridConnectModeKind_VC_VSI = 2;
    // Current-controlled voltage-source inverter (CC-VSI)
     GridConnectModeKind_CC_VSI = 3;
    // Not applicable / Unknown
     GridConnectModeKind_none = 98;
    // MISSING DOCUMENTATION!!!
     GridConnectModeKind_other = 99;
    // Voltage source inverter regulating to P and Q references (VSI PQ)
     GridConnectModeKind_VSI_PQ = 2000;
    // Voltage source inverter regulating to voltage and frequency references paralleling other
    // generation and not grid forming (VSI VF).
     GridConnectModeKind_VSI_VF = 2001;
    // Voltage source inverter regulating to voltage and frequency references as primary grid forming
    // generation (VSI ISO).
     GridConnectModeKind_VSI_ISO = 2002;
}

message Optional_GridConnectModeKind
{
    GridConnectModeKind value = 1;
}

// Grid connect mode kind
message ENG_GridConnectModeKind
{
    // The value of the status setting.
    GridConnectModeKind setVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    google.protobuf.StringValue setValExtension = 2;
}

// Power factor sign (PFSignKind enumeration)
enum PFSignKind
{
    // Undefined enum value which can be used for Protobuf generation and be consistent with other
    // technologies.
     PFSignKind_UNDEFINED = 0;
    // All analogue values are [F(t+T)-F(t)] for a calculation interval T (in the same unit as the
    // original entity). Note: The client can still calculate rate so: RATE = DIFF/T.
     PFSignKind_IEC = 1;
    // All analogue values (i.e., all common attributes 'i' and 'f') meet the sampling and filtering
    // characteristics specified in IEEE C37.118.1 for M-CLASS.
     PFSignKind_EEI = 2;
}

message Optional_PFSignKind
{
    PFSignKind value = 1;
}

// Enumerated status setting (FC=SP) (ENG_SP)
message ENG_PFSignKind
{
    // The value of the status setting.
    PFSignKind setVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// DER operational state (DERGeneratorStateKind)
enum DERGeneratorStateKind
{
    // Undefined enum value which can be used for Protobuf generation and be consistent with other
    // technologies.
     DERGeneratorStateKind_UNDEFINED = 0;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Not_operating = 1;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Operating = 2;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Starting_up = 3;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Shutting_down = 4;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_At_disconnect_level = 5;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Ramping_in_power = 6;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Ramping_in_reactive_power = 7;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Standby = 8;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Not_applicable_Unknown = 98;
    // MISSING DOCUMENTATION!!!
     DERGeneratorStateKind_Other = 99;
}

message Optional_DERGeneratorStateKind
{
    DERGeneratorStateKind value = 1;
}

// DER generation state kind. ENS stands for Enumerated status
message ENS_DERGeneratorStateKind
{
    // Quality of the value in 'stVal'.
    Quality q = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Value of the data.
    DERGeneratorStateKind stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Dynamic test status (see IEC61850-7-2 section 20.2.1 Direct control with normal security, state
// machine diagram)   A simplified state machine diagram (from Herb F.) is provided.
enum DynamicTestKind
{
    // None
     DynamicTestKind_none = 0;
    // Testing status
     DynamicTestKind_testing = 1;
    // Operating status
     DynamicTestKind_operating = 2;
    // Failed status
     DynamicTestKind_failed = 3;
}

message Optional_DynamicTestKind
{
    DynamicTestKind value = 1;
}

// Dynamic test kind. ENS stands for Enumerated status
message ENS_DynamicTestKind
{
    // Quality of the value in 'stVal'.
    Quality q = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Value of the data.
    DynamicTestKind stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Grid connect event &amp; status mode kind
message ENS_GridConnectModeKind
{
    // Actual Grid Connection Mode
    GridConnectModeKind stVal = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    string stValExtension = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// MISSING DOCUMENTATION!!!
message ESS
{
    // UML inherited base object
    ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
}

// Generic event message information
message EventMessageInfo
{
    // UML inherited base object
    MessageInfo messageInfo = 1 [(uml.option_parent_message) = true];
}

// Event value
message EventValue
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
}

// The source where a forecast value is issued.
message ForecastValueSource
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
}

// Intelligent Electronic Device is a device with a microprocessor that can contain one or more
// (IEC61850) SERVERs. In the context of IEC61850, IED could be an electronic protection device, a
// controller or even a laptop/desktop computer. <b>Modelling note</b>: This class is not explicitly
// defined in IEC61850-7-2 (but only in SCL: IEC61850-6). However, it is an important concept that
// deserves its place in the meta-model. When the meta-model gets instantiated from a direct link to an
// IED with an IEC61850 SERVER, we typically create an instance of the meta-model IED per connection.
// When the meta-model gets instantiated from an SCL file, there is the full description of IED and its
// functions.
message ForecastIED
{
    // UML inherited base object
    ForecastValueSource forecastValueSource = 1 [(uml.option_parent_message) = true];
    // For control, this is an application ID, unique within communication system, and if the message
    // is transformed between gateway the original source application ID should be kept.
    string sourceApplicationID = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Message publication date time
    int64 sourceDateTime = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Forecast value
message ForecastValue
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
}

// Intelligent Electronic Device is a device with a microprocessor that can contain one or more
// (IEC61850) SERVERs. In the context of IEC61850, IED could be an electronic protection device, a
// controller or even a laptop/desktop computer. <b>Modelling note</b>: This class is not explicitly
// defined in IEC61850-7-2 (but only in SCL: IEC61850-6). However, it is an important concept that
// deserves its place in the meta-model. When the meta-model gets instantiated from a direct link to an
// IED with an IEC61850 SERVER, we typically create an instance of the meta-model IED per connection.
// When the meta-model gets instantiated from an SCL file, there is the full description of IED and its
// functions.
message IED
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
}

// <<statistics>> Integer status (INS)
message StatusINS
{
    // Quality of the value in 'stVal'.
    Quality q = 1;
    // Value of the data.
    int32 stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
    Timestamp t = 3;
    // Units for: 'stVal', 'subVal'.
    Unit units = 4;
}

// Status expressed in integer based on IEC61850 GGIO.
message IntegerStatusGGIO
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // Generic integer status input <i>n</i>.
    StatusINS IntIn = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Phase code
    Optional_PhaseCodeKind Phase = 3;
}

// The current state for a measurement. A state value is an instance of a measurement from a
// specific source. Measurements can be associated with many state values, each representing a
// different source for the measurement.
message MeasurementValue
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
}

// Physical asset that performs the metering role of the usage point. Used for measuring
// consumption and detection of events.
message Meter
{
    // UML inherited base object
    ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
}

// Generic event message information
message OptimizationMessageInfo
{
    // UML inherited base object
    MessageInfo messageInfo = 1 [(uml.option_parent_message) = true];
}

// Specialized 61850 MMTN LN class
message ReadingMMTN
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // Apparent energy demand (direction: from busbar).
    BCR DmdVAh = 2;
    // Reactive energy demand (direction: from busbar).
    BCR DmdVArh = 3;
    // Real energy demand (direction: from busbar).
    BCR DmdWh = 4;
    // Apparent energy supply (default direction: towards busbar).
    BCR SupVAh = 5;
    // Reactive energy supply (default direction: towards busbar).
    BCR SupVArh = 6;
    // Real energy supply (default direction: towards busbar).
    BCR SupWh = 7;
    // Net apparent energy since last reset.
    BCR TotVAh = 8;
    // Net reactive energy since last reset.
    BCR TotVArh = 9;
    // Net real energy since last reset.
    BCR TotWh = 10;
}

// Specialized 61850 MMTN LN class
message PhaseMMTN
{
    // MISSING DOCUMENTATION!!!
    ReadingMMTN phsA = 1;
    // MISSING DOCUMENTATION!!!
    ReadingMMTN phsAB = 2;
    // MISSING DOCUMENTATION!!!
    ReadingMMTN phsB = 3;
    // MISSING DOCUMENTATION!!!
    ReadingMMTN phsBC = 4;
    // MISSING DOCUMENTATION!!!
    ReadingMMTN phsC = 5;
    // MISSING DOCUMENTATION!!!
    ReadingMMTN phsCA = 6;
}

// Grid connect mode kind
message RampRate
{
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;
}

// Generic reading message information
message ReadingMessageInfo
{
    // UML inherited base object
    MessageInfo messageInfo = 1 [(uml.option_parent_message) = true];
}

// Specialized 61850 MMTR class
message ReadingMMTR
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // Apparent energy demand (direction: from busbar).
    BCR DmdVAh = 2;
    // Reactive energy demand (direction: from busbar).
    BCR DmdVArh = 3;
    // Real energy demand (direction: from busbar).
    BCR DmdWh = 4;
    // Apparent energy supply (default direction: towards busbar).
    BCR SupVAh = 5;
    // Reactive energy supply (default direction: towards busbar).
    BCR SupVArh = 6;
    // Real energy supply (default direction: towards busbar).
    BCR SupWh = 7;
    // Net apparent energy since last reset.
    BCR TotVAh = 8;
    // Net reactive energy since last reset.
    BCR TotVArh = 9;
    // Net real energy since last reset.
    BCR TotWh = 10;
}

// Phase to ground/neutral related measured values of a three-phase system (WYE)
message WYE
{
    // Net current, as the algebraic sum of the instantaneous values of currents flowing through all
    // live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
    // instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
    CMV net = 1;
    // Value of the measured phase neutral. If a direct measurement of this value is not available, it
    // is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
    // values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
    // instCVal'); in that case, 'neut'='res'.
    CMV neut = 2;
    // Value of phase A.
    CMV phsA = 3;
    // Value of phase B.
    CMV phsB = 4;
    // Value of phase C.
    CMV phsC = 5;
}

// Specialized 61850 MMXU LN class
message ReadingMMXU
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // Phase to ground/phase to neutral three phase currents.
    WYE A = 2;
    // Kind of statistical calculation, specifying how the data attributes that represent analogue
    // values have been calculated. The calculation method shall be the same for all data objects of the
    // logical node instance.If the value is 'PEAK_FUNDAMENTAL', angle may be present in a data object of
    // complex measured value type (CMV, such as in WYE, DEL, etc.), otherwise angle is not used (if
    // ‘TRUE_RMS’ and ‘RMS_FUNDAMENTAL’).If the value is 'unspecified', the dependent data objects may be
    // meaningless.
    ENG_CalcMethodKind ClcMth = 3;
    // Frequency [Hz].
    MV Hz = 4;
    // Phase to ground/phase to neutral power factors.The power factor is defined as P (active power) /
    // S (apparent power), so the value range is 0...1. If current (I) and voltage (U) are sinusoidal and
    // displaced by the angle phi, then the power factor is |cos phi|, again with the value range 0...1.
    // Therefore, for the power factor per phase, value is contained in 'mag' and 'ang' is not used.
    WYE PF = 5;
    // Sign convention for power factor 'PF' (and reactive power 'VAr').
    ENG_PFSignKind PFSign = 6;
    // Phase to ground (line) voltages.
    WYE PhV = 7;
    // Phase to phase voltages.
    DEL PPV = 8;
    // Phase to ground/phase to neutral apparent powers S.
    WYE VA = 9;
    // Phase to ground/phase to neutral reactive powers Q.
    WYE VAr = 10;
    // Phase to ground/phase to neutral real powers P.
    WYE W = 11;
}

// Double point position status
enum DbPosKind
{
    // Transient status
     DbPosKind_transient = 0;
    // Closed status
     DbPosKind_closed = 1;
    // Open status
     DbPosKind_open = 2;
    // Invalid status
     DbPosKind_invalid = 3;
}

message Optional_DbPosKind
{
    DbPosKind value = 1;
}

// Specialized 61850 DPS class
message StatusDPS
{
    // Quality of the value in 'stVal'.
    Quality q = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Status value of the controllable data object.
    DbPosKind stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change of the value in any of 'stVal' or 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for breaker, recloser and switch status and event profiles:  LN: Circuit
// breaker   Name: XCBR
message StatusAndEventXCBR
{
    // UML inherited base object
    LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ENS_DynamicTestKind DynamicTest = 2;
    // MISSING DOCUMENTATION!!!
    StatusDPS Pos = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// &lt;&lt;statistics&gt;&gt; Integer controlled step position information (ISC)
message StatusISC
{
    // Quality of the value in 'valWTr'.
    Quality q = 1;
    // Status value
    int32 stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change of the value in any of 'valWTr' or 'q'.
    Timestamp t = 3;
}

// Generic status message information
message StatusMessageInfo
{
    // UML inherited base object
    MessageInfo messageInfo = 1 [(uml.option_parent_message) = true];
}

// Controllable single point (SPC)
message StatusSPC
{
    // Quality of the value in 'stVal'.
    Quality q = 1;
    // Status value of the controllable data object.
    bool stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change of the value in any of 'stVal' or 'q'.
    Timestamp t = 3;
}

// Status value
message StatusValue
{
    // UML inherited base object
    IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
}

// Visible string status (VSS)
message VSS
{
    // Quality of the value in 'stVal'.
    Quality q = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Value of the data.
    string stVal = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change of the value in any of 'stVal' or 'q'.
    Timestamp t = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// LN: Generic process I/O   Name: GGIO
message StringStatusGGIO
{
    // UML inherited base object
    LogicalNode logicalNode = 1 [(uml.option_parent_message) = true];
    // Phase code
    Optional_PhaseCodeKind Phase = 2;
    // String status
    VSS StrIn = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Point definition (Point)
message SwitchPoint
{
    // Switch position
    ControlDPC Pos = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Start time
    ControlTimestamp startTime = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Curve shape setting (FC=SP) (CSG_SP)
message SwitchCSG
{
    // The array with the points specifying a curve shape.
    repeated SwitchPoint crvPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message SwitchControlScheduleFSCH
{
    // Discrete value in SwitchCSG type
    SwitchCSG ValDCSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// State kind
enum StateKind
{
    // MISSING DOCUMENTATION!!!
     StateKind_off = 0;
    // MISSING DOCUMENTATION!!!
     StateKind_on = 1;
    // MISSING DOCUMENTATION!!!
     StateKind_standby = 2;
}

message Optional_StateKind
{
    StateKind value = 1;
}

