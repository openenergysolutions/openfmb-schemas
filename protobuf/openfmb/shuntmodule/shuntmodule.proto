syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (w ShuntModule + new status points).eap
// Friday, November 15, 2019 1:44:21 PM UTC

package shuntmodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/openfmb/shuntmodule";
option java_package = "openfmb.shuntmodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.shuntmodule";

import "uml.proto";
import "google/protobuf/wrappers.proto";
import "commonmodule/commonmodule.proto";

// Shunt compensator system
message ShuntSystem
{
    // UML inherited base object
    commonmodule.ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
}

// MISSING DOCUMENTATION!!!
enum SwitchingCapabilityKind
{
    // MISSING DOCUMENTATION!!!
     SwitchingCapabilityKind_none = 0;
    // Open
     SwitchingCapabilityKind_open = 1;
    // Close
     SwitchingCapabilityKind_close = 2;
    // Open and Close
     SwitchingCapabilityKind_open_and_close = 3;
}

message Optional_SwitchingCapabilityKind
{
    SwitchingCapabilityKind value = 1;
}

// <<abstract>> Enumerated status (ENS)
message ENS_SwitchingCapabilityKind
{
    // If true, 'q.operatorBlocked'=true, and the process value is no longer updated.
    google.protobuf.BoolValue blkEna = 1;
    // Quality of the value in 'stVal'.
    commonmodule.Quality q = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Value of the data.
    SwitchingCapabilityKind stVal = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
    commonmodule.Timestamp t = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// LN: Power shunt   Name: YPSH
message ShuntEventAndStatusYPSH
{
    // (controllable) If true, 'close' action has been blocked; can be set from another logical node. 
    // Operating capability 'ShOpCap' does not reflect the blocked closing.
    commonmodule.ControlSPC BlkCls = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (controllable) If true, 'open' action has been blocked; can be set from another logical node.
    // Operating capability 'ShOpCap' does not reflect the blocked opening.
    commonmodule.ControlSPC BlkOpn = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // (controllable) Position of the switch of power shunt.
    commonmodule.ControlDPC Pos = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Physical capability of the switch of the power shunt to operate.
    ENS_SwitchingCapabilityKind ShOpCap = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Point definition (Point)
message ShuntPoint
{
    // Regulator control
    ShuntEventAndStatusYPSH control = 1;
    // Start time
    commonmodule.Timestamp startTime = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Curve shape setting (FC=SP) (CSG_SP)
message ShuntCSG
{
    // The array with the points specifying a curve shape.
    repeated ShuntPoint crvPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message ShuntControlScheduleFSCH
{
    // Control value in CSG type
    ShuntCSG ValCSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Using 61850 FSCC for shunt control
message ShuntControlFSCC
{
    // UML inherited base object
    commonmodule.ControlFSCC controlFSCC = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ShuntControlScheduleFSCH shuntControlScheduleFSCH = 2;
}

// Regulator control
message ShuntControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    ShuntControlFSCC shuntControlFSCC = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Shunt control profile.  Instructs an end device (or an end device group) to perform a specified
// action.
message ShuntControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntControl shuntControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntSystem shuntSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for shunt discrete control:
message ShuntDiscreteControlZCAP
{
    // UML inherited base object
    commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ControlDPC Pos = 2;
}

// Shunt discrete control
message ShuntDiscreteControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    ShuntDiscreteControlZCAP shuntDiscreteControlZCAP = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Shunt discrete control profile.  Instructs an end device (or an end device group) to perform a
// specified action.
message ShuntDiscreteControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntDiscreteControl shuntControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntSystem shuntSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Point definition (Point)
message ShuntEventAndStatusPoint
{
    // Regulator control
    ShuntEventAndStatusYPSH eventAndStatus = 1;
}

// OpenFMB 61850 specialization for both ShuntEventProfile and ShuntStatusProfile
message ShuntEventAndStatusZCAP
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ENS_DynamicTestKind DynamicTest = 2;
    // MISSING DOCUMENTATION!!!
    ShuntEventAndStatusPoint PointStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Shunt event
message ShuntEvent
{
    // UML inherited base object
    commonmodule.EventValue eventValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ShuntEventAndStatusZCAP shuntEventAndStatusZCAP = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Shunt status profile
message ShuntEventProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.EventMessageInfo eventMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntEvent shuntEvent = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntSystem shuntSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Shunt reading value
message ShuntReading
{
    // UML inherited base object
    commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseMMTN phaseMMTN = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMTR readingMMTR = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU readingMMXU = 4;
}

// Shunt reading profile
message ShuntReadingProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntReading shuntReading = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntSystem shuntSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Shunt status
message ShuntStatus
{
    // UML inherited base object
    commonmodule.StatusValue statusValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ShuntEventAndStatusZCAP shuntEventAndStatusZCAP = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Shunt status profile
message ShuntStatusProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.StatusMessageInfo statusMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntStatus shuntStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ShuntSystem shuntSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

