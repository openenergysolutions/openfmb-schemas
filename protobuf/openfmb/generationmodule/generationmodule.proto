syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (v2.0.0).eap
// Thursday, September 17, 2020 3:39:33 PM UTC

package generationmodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/generationmodule";
option java_package = "openfmb.generationmodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.generationmodule";

import "uml.proto";
import "google/protobuf/wrappers.proto";
import "commonmodule/commonmodule.proto";

// Point definition (Point)
message GenerationPoint
{
    // Black start enable
    commonmodule.ControlDPC blackStartEnabled = 1;
    // Enable frequency set point
    commonmodule.ControlDPC frequencySetPointEnabled = 2;
    // Black start enable
    google.protobuf.FloatValue pctHzDroop = 3;
    // Black start enable
    google.protobuf.FloatValue pctVDroop = 4;
    // Ramp rates
    commonmodule.RampRate rampRates = 5;
    // Enable reactive power set point
    commonmodule.ControlDPC reactivePwrSetPointEnabled = 6;
    // Enable joint real power set point
    commonmodule.ControlDPC realPwrSetPointEnabled = 7;
    // Reset device
    commonmodule.ControlDPC reset = 8;
    // ESS state
    commonmodule.Optional_StateKind state = 9;
    // Synchronize back to grid
    commonmodule.ControlDPC syncBackToGrid = 10;
    // Transition to island on grid loss enable
    commonmodule.ControlDPC transToIslndOnGridLossEnabled = 11;
    // Enable voltage set point
    commonmodule.ControlDPC voltageSetPointEnabled = 12;
    // Start time
    commonmodule.ControlTimestamp startTime = 13 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Curve shape setting (FC=SP) (CSG_SP)
message GenerationCSG
{
    // The array with the points specifying a curve shape.
    repeated GenerationPoint crvPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message GenerationControlScheduleFSCH
{
    // Discrete value in GenerationCSG type
    GenerationCSG ValDCSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// LN: Schedule controller   Name: FSCC
message GenerationControlFSCC
{
    // UML inherited base object
    commonmodule.ControlFSCC controlFSCC = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GenerationControlScheduleFSCH GenerationControlScheduleFSCH = 2;
}

// Generation control
message GenerationControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    GenerationControlFSCC generationControlFSCC = 3;
}

// A single or set of synchronous machines for converting mechanical power into alternating-current
// power. For example, individual machines within a set may be defined for scheduling purposes while a
// single control signal is derived for the set. In this case there would be a GeneratingUnit for each
// member of the set and an additional GeneratingUnit corresponding to the set.
message GeneratingUnit
{
    // UML inherited base object
    commonmodule.ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
    // This is the maximum operating active power limit the dispatcher can enter for this unit.
    commonmodule.ActivePower maxOperatingP = 2;
}

// Generation control profile
message GenerationControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GeneratingUnit generatingUnit = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    GenerationControl generationControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Real power control kind
enum RealPowerControlKind
{
    // MISSING DOCUMENTATION!!!
     RealPowerControlKind_UNDEFINED = 0;
    // MISSING DOCUMENTATION!!!
     RealPowerControlKind_advanced = 1;
    // MISSING DOCUMENTATION!!!
     RealPowerControlKind_droop = 2;
    // MISSING DOCUMENTATION!!!
     RealPowerControlKind_isochronous = 3;
    // Real power setpoint
     RealPowerControlKind_realPower = 4;
}

message Optional_RealPowerControlKind
{
    RealPowerControlKind value = 1;
}

// Generation discrete control
message DroopParameter
{
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue slope = 1;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue unloadedOffset = 2;
}

// Generation real power control
message RealPowerControl
{
    // MISSING DOCUMENTATION!!!
    DroopParameter droopSetpoint = 1;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue isochronousSetpoint = 2;
    // MISSING DOCUMENTATION!!!
    Optional_RealPowerControlKind realPowerControlMode = 3;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue realPowerSetpoint = 4;
}

// Real power control kind
enum ReactivePowerControlKind
{
    // MISSING DOCUMENTATION!!!
     ReactivePowerControlKind_UNDEFINED = 0;
    // MISSING DOCUMENTATION!!!
     ReactivePowerControlKind_advanced = 1;
    // MISSING DOCUMENTATION!!!
     ReactivePowerControlKind_droop = 2;
    // Voltage setpoint
     ReactivePowerControlKind_voltage = 3;
    // Reactive power setpoint
     ReactivePowerControlKind_reactivePower = 4;
    // MISSING DOCUMENTATION!!!
     ReactivePowerControlKind_powerFactor = 5;
}

message Optional_ReactivePowerControlKind
{
    ReactivePowerControlKind value = 1;
}

// Generation real power control
message ReactivePowerControl
{
    // MISSING DOCUMENTATION!!!
    DroopParameter droopSetpoint = 1;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue powerFactorSetpoint = 2;
    // MISSING DOCUMENTATION!!!
    Optional_ReactivePowerControlKind reactivePowerControlMode = 3;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue reactivePowerSetpoint = 4;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue voltageSetpoint = 5;
}

// Generation discrete control
message GenerationDiscreteControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    ReactivePowerControl ReactivePowerControl = 3;
    // MISSING DOCUMENTATION!!!
    RealPowerControl RealPowerControl = 4;
}

// Generation discrete control profile
message GenerationDiscreteControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GeneratingUnit generatingUnit = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    GenerationDiscreteControl generationDiscreteControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Generation reading value
message GenerationReading
{
    // UML inherited base object
    commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseMMTN phaseMMTN = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMTR readingMMTR = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU readingMMXU = 4;
}

// Generation reading profile
message GenerationReadingProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GeneratingUnit generatingUnit = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    GenerationReading generationReading = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Point definition (Point)
message GenerationPointStatus
{
    // Black start enable
    commonmodule.StatusDPS blackStartEnabled = 1;
    // Enable frequency set point
    commonmodule.StatusDPS frequencySetPointEnabled = 2;
    // Black start enable
    google.protobuf.FloatValue pctHzDroop = 3;
    // Black start enable
    google.protobuf.FloatValue pctVDroop = 4;
    // Ramp rates
    commonmodule.RampRate rampRates = 5;
    // Enable reactive power set point
    commonmodule.StatusDPS reactivePwrSetPointEnabled = 6;
    // Enable real power set point
    commonmodule.StatusDPS realPwrSetPointEnabled = 7;
    // ESS state
    commonmodule.Optional_StateKind state = 8;
    // Synchronize back to grid
    commonmodule.StatusDPS syncBackToGrid = 9;
    // Transition to island on grid loss enable
    commonmodule.StatusDPS transToIslndOnGridLossEnabled = 10;
    // Enable voltage set point
    commonmodule.StatusDPS voltageSetPointEnabled = 11;
}

// Specialized 61850 ZGEN class
message GenerationEventAndStatusZGEN
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.StatusSPS AuxPwrSt = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ENS_DynamicTestKind DynamicTest = 3;
    // Emergency stop
    commonmodule.StatusSPS EmgStop = 4;
    // Generator is synchronized to EPS, or not; True = Synchronized
    commonmodule.StatusSPS GnSynSt = 5;
    // Point status
    GenerationPointStatus PointStatus = 6;
}

// Specialized generation event ZGEN
message GenerationEventZGEN
{
    // UML inherited base object
    GenerationEventAndStatusZGEN generationEventAndStatusZGEN = 1 [(uml.option_parent_message) = true];
}

// Generation event
message GenerationEvent
{
    // UML inherited base object
    commonmodule.EventValue eventValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GenerationEventZGEN generationEventZGEN = 2;
}

// Generation event profile
message GenerationEventProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.EventMessageInfo eventMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GeneratingUnit generatingUnit = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    GenerationEvent generationEvent = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Specialized 61850 ZGEN class
message GenerationStatusZGEN
{
    // UML inherited base object
    GenerationEventAndStatusZGEN generationEventAndStatusZGEN = 1 [(uml.option_parent_message) = true];
}

// Generation status
message GenerationStatus
{
    // UML inherited base object
    commonmodule.StatusValue statusValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GenerationStatusZGEN generationStatusZGEN = 2;
}

// Generation status profile
message GenerationStatusProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.StatusMessageInfo statusMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    GeneratingUnit generatingUnit = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    GenerationStatus generationStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

