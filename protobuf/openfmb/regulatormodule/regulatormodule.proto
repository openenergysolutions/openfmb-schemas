syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (w ShuntModule + new status points).eap
// Friday, November 15, 2019 1:44:21 PM UTC

package regulatormodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/openfmb/regulatormodule";
option java_package = "openfmb.regulatormodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.regulatormodule";

import "uml.proto";
import "google/protobuf/wrappers.proto";
import "commonmodule/commonmodule.proto";

// LN: Automatic tap changer controller   Name: ATCC
message RegulatorControlATCC
{
    // Centre of voltage control bandwidth (forward power flow presumed).
    commonmodule.ASG BndCtr = 1;
    // Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
    // of the nominal voltage (forward power flow presumed).
    commonmodule.ASG BndWid = 2;
    // Time to wait before operating, after reaching the control point (forward power flow presumed).
    commonmodule.ControlING CtlDlTmms = 3;
    // Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
    commonmodule.ASG LDCR = 4;
    // Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
    commonmodule.ASG LDCX = 5;
    // Line drop voltage due to line total impedance (forward power flow presumed) at rated current.
    commonmodule.ASG LDCZ = 6;
    // (controllable) If true, transformers operate in parallel, otherwise they operate independently.
    commonmodule.ControlSPC ParOp = 7;
    // (controllable) Tap position change to the specified value.
    commonmodule.ControlISC TapPos = 8;
}

// Point definition (Point)
message RegulatorPoint
{
    // Regulator control
    RegulatorControlATCC control = 1;
    // Black start enable
    google.protobuf.FloatValue pctVDroop = 2;
    // Ramp rates
    commonmodule.RampRate rampRates = 3;
    // Enable reactive power set point
    commonmodule.ControlDPC reactivePwrSetPointEnabled = 4;
    // Reset device
    commonmodule.ControlDPC reset = 5;
    // State
    commonmodule.Optional_StateKind state = 6;
    // Enable voltage set point
    commonmodule.ControlDPC voltageSetPointEnabled = 7;
    // Start time
    commonmodule.Timestamp startTime = 8 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Curve shape setting (FC=SP) (CSG_SP)
message RegulatorCSG
{
    // The array with the points specifying a curve shape.
    repeated RegulatorPoint crvPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message RegulatorControlScheduleFSCH
{
    // Discrete value in RegulatorCSG type
    RegulatorCSG ValDCSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Using 61850 FSCC for regulator control
message RegulatorControlFSCC
{
    // UML inherited base object
    commonmodule.ControlFSCC controlFSCC = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;
}

// Regulator control
message RegulatorControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    RegulatorControlFSCC regulatorControlFSCC = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Pole-mounted fault interrupter with built-in phase and ground relays, current transformer (CT),
// and supplemental controls.
message RegulatorSystem
{
    // UML inherited base object
    commonmodule.ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
}

// Regulator control profile.  Instructs an end device (or an end device group) to perform a
// specified action.
message RegulatorControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorControl regulatorControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// LN: Automatic tap changer controller   Name: ATCC
message RegulatorEventAndStatusATCC
{
    // Centre of voltage control bandwidth (forward power flow presumed).
    commonmodule.ASG BndCtr = 1;
    // Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
    // of the nominal voltage (forward power flow presumed).
    commonmodule.ASG BndWid = 2;
    // Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
    commonmodule.ASG LDCR = 3;
    // Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
    commonmodule.ASG LDCX = 4;
    // Line drop voltage due to line total impedance (forward power flow presumed) at rated current.
    commonmodule.ASG LDCZ = 5;
    // (controllable) If true, transformers operate in parallel, otherwise they operate independently.
    commonmodule.StatusSPC ParOp = 6;
    // If true, there was an error in tap position change, or in tap indication (for instance, wrong
    // Binary Coded Decimal (BCD) code).
    commonmodule.StatusSPS TapOpErr = 7;
    // (controllable) Tap position change to the specified value.
    commonmodule.StatusISC TapPos = 8;
}

// Point definition (Point)
message RegulatorEventAndStatusPoint
{
    // Regulator event and status
    RegulatorEventAndStatusATCC eventAndStatus = 1;
    // Black start enable
    google.protobuf.FloatValue pctVDroop = 2;
    // Ramp rates
    commonmodule.RampRate rampRates = 3;
    // Enable reactive power set point
    commonmodule.StatusSPC reactivePwrSetPointEnabled = 4;
    // State
    commonmodule.Optional_StateKind state = 5;
    // Enable voltage set point
    commonmodule.StatusSPC voltageSetPointEnabled = 6;
}

// OpenFMB 61850 specialization for both RegulatorEventProfile and RegulatorStatusProfile
message RegulatorEventAndStatusANCR
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ENS_DynamicTestKind DynamicTest = 2;
    // MISSING DOCUMENTATION!!!
    RegulatorEventAndStatusPoint PointStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator event
message RegulatorEvent
{
    // UML inherited base object
    commonmodule.EventValue eventValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator event profile
message RegulatorEventProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.EventMessageInfo eventMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorEvent regulatorEvent = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator reading value
message RegulatorReading
{
    // UML inherited base object
    commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseMMTN phaseMMTN = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMTR readingMMTR = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU readingMMXU = 4;
}

// Regulator reading profile
message RegulatorReadingProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    repeated RegulatorReading regulatorReading = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1, (uml.option_multiplicity_max) = 2];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator status
message RegulatorStatus
{
    // UML inherited base object
    commonmodule.StatusValue statusValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator status profile
message RegulatorStatusProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.StatusMessageInfo statusMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.IED ied = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorStatus regulatorStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

