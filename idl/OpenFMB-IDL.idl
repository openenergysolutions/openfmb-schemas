/*
 *  IDL file generated by RTI Connext DDS Enterprise Architect IDL 4 Add-in version 1.0
 *      Enterprise Architect File:  C:\Users\dwayn\Google Drive\Host_Downloads\New-Protobufs\openfmb-idl.eapx
 *      Date: 9/29/2020 8:19:05 AM
 */
 
/* ******************************************************************* */
/* Note: No configuration used. Reason: Cannot find file "C:\Program Files (x86)\idl4_ea_extension-1.27\IDL4GeneratorConfig.txt" */

/* ******************************************************************* */
/* These are UML builtin primitive types that are not primitive in IDL */
module UML_Extension { 
    // Place the type declarations below
    typedef string    ErrorUnresolvedType; 
    typedef long long dateTime;
    typedef long long date;
    typedef string token;
    typedef string NMTOKEN;
};

/* ******************************************************************* */
/* These are Types defined in the model */

/* -----  Model: "Model"  ----- */
module openfmb {
    struct FieldOptions;
    struct MessageOptions;
    module coordinationservicemodule {
        struct CoordinationControl;
        struct CoordinationControlDCSC;
        struct CoordinationControlProfile;
        struct CoordinationEvent;
        struct CoordinationEventDCSC;
        struct CoordinationEventProfile;
        struct CoordinationStatus;
        struct CoordinationStatusDCSC;
        struct CoordinationStatusProfile;
        struct ENG_CoordinationServiceModeKind;
        enum CoordinationServiceModeKind {
            @value(2)             CoordinationServiceModeKind_manual,
            @value(3)             CoordinationServiceModeKind_netzero,
            @value(4)             CoordinationServiceModeKind_start,
            @value(5)             CoordinationServiceModeKind_stop,
            @value(0)             CoordinationServiceModeKind_none,
            @value(1)             CoordinationServiceModeKind_auto
        };
    }; /* module coordinationservicemodule */

    module breakermodule {
        struct Breaker;
        struct BreakerDiscreteControl;
        struct BreakerDiscreteControlProfile;
        struct BreakerDiscreteControlXCBR;
        struct BreakerEvent;
        struct BreakerEventProfile;
        struct BreakerReading;
        struct BreakerReadingProfile;
        struct BreakerReadingValue;
        struct BreakerStatus;
        struct BreakerStatusProfile;
    }; /* module breakermodule */

    module capbankmodule {
        struct CapBankControl;
        struct CapBankControlFSCC;
        struct CapBankControlProfile;
        struct CapBankControlScheduleFSCH;
        struct CapBankControlYPSH;
        struct CapBankCSG;
        struct CapBankDiscreteControl;
        struct CapBankDiscreteControlProfile;
        struct CapBankDiscreteControlYPSH;
        struct CapBankEvent;
        struct CapBankEventAndStatusYPSH;
        struct CapBankEventProfile;
        struct CapBankPoint;
        struct CapBankReading;
        struct CapBankReadingProfile;
        struct CapBankStatus;
        struct CapBankStatusProfile;
        struct CapBankSystem;
    }; /* module capbankmodule */

    module commonmodule {
        struct ACD;
        struct ACDCTerminal;
        struct ActivePower;
        struct AnalogEventAndStatusGGIO;
        struct ApplicationSystem;
        struct ASG;
        struct BCR;
        struct BooleanEventAndStatusGGIO;
        struct CheckConditions;
        struct CMV;
        struct ConductingEquipment;
        struct ConductingEquipmentTerminalReading;
        struct ControlAPC;
        struct ControlDPC;
        struct ControlFSCC;
        struct ControlINC;
        struct ControlING;
        struct ControlISC;
        struct ControlMessageInfo;
        struct ControlScheduleFSCH;
        struct ControlSPC;
        struct ControlTimestamp;
        struct ControlValue;
        struct DateTimeInterval;
        struct DEL;
        struct DetailQual;
        struct DiscreteControlXCBR;
        struct EnergyConsumer;
        struct ENG_CalcMethodKind;
        struct ENG_GridConnectModeKind;
        struct ENG_PFSignKind;
        struct ENG_ScheduleParameter;
        struct ENS_BehaviourModeKind;
        struct ENS_DERGeneratorStateKind;
        struct ENS_DynamicTestKind;
        struct ENS_GridConnectModeKind;
        struct ENS_HealthKind;
        struct ENS_SwitchingCapabilityKind;
        struct ESS;
        struct EventMessageInfo;
        struct EventValue;
        struct ForecastIED;
        struct ForecastValue;
        struct ForecastValueSource;
        struct IdentifiedObject;
        struct IntegerEventAndStatusGGIO;
        struct LogicalNode;
        struct LogicalNodeForControl;
        struct LogicalNodeForEventAndStatus;
        struct MeasurementValue;
        struct MessageInfo;
        struct Meter;
        struct MV;
        struct NamedObject;
        struct OptimizationMessageInfo;
        struct PhaseAPC;
        struct PhaseDPC;
        struct PhaseDPS;
        struct PhaseINS;
        struct PhaseISC;
        struct PhaseMMTN;
        struct PhaseRecloseAction;
        struct PhaseSPS;
        struct PMG;
        struct Quality;
        struct RampRate;
        struct ReadingMessageInfo;
        struct ReadingMMTN;
        struct ReadingMMTR;
        struct ReadingMMXU;
        struct ScheduleCSG;
        struct SchedulePoint;
        struct StatusAndEventXCBR;
        struct StatusDPS;
        struct StatusINC;
        struct StatusINS;
        struct StatusISC;
        struct StatusMessageInfo;
        struct StatusSPC;
        struct StatusSPS;
        struct StatusValue;
        struct StringEventAndStatusGGIO;
        struct SwitchCSG;
        struct SwitchPoint;
        struct Terminal;
        struct TimeQuality;
        struct Timestamp;
        struct Unit;
        struct Vector;
        struct VSC;
        struct VSS;
        struct WYE;
        enum BehaviourModeKind {
            @value(0)             BehaviourModeKind_UNDEFINED,
            @value(2)             BehaviourModeKind_blocked,
            @value(3)             BehaviourModeKind_test,
            @value(1)             BehaviourModeKind_on,
            @value(5)             BehaviourModeKind_off,
            @value(4)             BehaviourModeKind_test_blocked
        };
        enum CalcMethodKind {
            @value(11)             CalcMethodKind_P_CLASS,
            @value(0)             CalcMethodKind_UNDEFINED,
            @value(13)             CalcMethodKind_DIFF,
            @value(12)             CalcMethodKind_M_CLASS
        };
        enum DbPosKind {
            @value(3)             DbPosKind_invalid,
            @value(2)             DbPosKind_open,
            @value(0)             DbPosKind_transient,
            @value(1)             DbPosKind_closed
        };
        enum DERGeneratorStateKind {
            @value(1)             DERGeneratorStateKind_Not_operating,
            @value(0)             DERGeneratorStateKind_UNDEFINED,
            @value(2)             DERGeneratorStateKind_Operating,
            @value(3)             DERGeneratorStateKind_Starting_up,
            @value(4)             DERGeneratorStateKind_Shutting_down,
            @value(5)             DERGeneratorStateKind_At_disconnect_level,
            @value(6)             DERGeneratorStateKind_Ramping_in_power,
            @value(7)             DERGeneratorStateKind_Ramping_in_reactive_power,
            @value(98)             DERGeneratorStateKind_Not_applicable_Unknown,
            @value(99)             DERGeneratorStateKind_Other,
            @value(8)             DERGeneratorStateKind_Standby
        };
        enum DynamicTestKind {
            @value(3)             DynamicTestKind_failed,
            @value(2)             DynamicTestKind_operating,
            @value(0)             DynamicTestKind_none,
            @value(1)             DynamicTestKind_testing
        };
        enum FaultDirectionKind {
            @value(2)             FaultDirectionKind_backward,
            @value(0)             FaultDirectionKind_unknown,
            @value(3)             FaultDirectionKind_both,
            @value(1)             FaultDirectionKind_forward
        };
        enum GridConnectModeKind {
            @value(1)             GridConnectModeKind_CSI,
            @value(0)             GridConnectModeKind_UNDEFINED,
            @value(2)             GridConnectModeKind_VC_VSI,
            @value(3)             GridConnectModeKind_CC_VSI,
            @value(98)             GridConnectModeKind_none,
            @value(99)             GridConnectModeKind_other,
            @value(2000)             GridConnectModeKind_VSI_PQ,
            @value(2001)             GridConnectModeKind_VSI_VF,
            @value(2002)             GridConnectModeKind_VSI_ISO
        };
        enum HealthKind {
            @value(2)             HealthKind_Warning,
            @value(3)             HealthKind_Alarm,
            @value(0)             HealthKind_none,
            @value(1)             HealthKind_OK
        };
        enum PFSignKind {
            @value(0)             PFSignKind_UNDEFINED,
            @value(2)             PFSignKind_EEI,
            @value(1)             PFSignKind_IEC
        };
        enum PhaseCodeKind {
            @value(128)             PhaseCodeKind_A,
            @value(132)             PhaseCodeKind_AB,
            @value(224)             PhaseCodeKind_ABC,
            @value(225)             PhaseCodeKind_ABCN,
            @value(193)             PhaseCodeKind_ABN,
            @value(40)             PhaseCodeKind_AC,
            @value(41)             PhaseCodeKind_ACN,
            @value(129)             PhaseCodeKind_AN,
            @value(64)             PhaseCodeKind_B,
            @value(66)             PhaseCodeKind_BC,
            @value(97)             PhaseCodeKind_BCN,
            @value(65)             PhaseCodeKind_BN,
            @value(32)             PhaseCodeKind_C,
            @value(33)             PhaseCodeKind_CN,
            @value(16)             PhaseCodeKind_N,
            @value(0)             PhaseCodeKind_none,
            @value(512)             PhaseCodeKind_s1,
            @value(768)             PhaseCodeKind_s12,
            @value(769)             PhaseCodeKind_s12N,
            @value(513)             PhaseCodeKind_s1N,
            @value(256)             PhaseCodeKind_s2,
            @value(257)             PhaseCodeKind_s2N,
            @value(1)             PhaseCodeKind_other
        };
        enum PhaseFaultDirectionKind {
            @value(2)             PhaseFaultDirectionKind_backward,
            @value(0)             PhaseFaultDirectionKind_unknown,
            @value(1)             PhaseFaultDirectionKind_forward
        };
        enum RecloseActionKind {
            @value(2)             RecloseActionKind_lockout,
            @value(0)             RecloseActionKind_idle,
            @value(1)             RecloseActionKind_cycling
        };
        enum ScheduleParameterKind {
            @value(3)             ScheduleParameterKind_A_neut_mag,
            @value(2)             ScheduleParameterKind_A_net_mag,
            @value(4)             ScheduleParameterKind_A_phsA_mag,
            @value(5)             ScheduleParameterKind_A_phsB_mag,
            @value(6)             ScheduleParameterKind_A_phsC_mag,
            @value(0)             ScheduleParameterKind_none,
            @value(7)             ScheduleParameterKind_Hz_mag,
            @value(1)             ScheduleParameterKind_other,
            @value(8)             ScheduleParameterKind_PF_net_mag,
            @value(9)             ScheduleParameterKind_PF_neut_mag,
            @value(10)             ScheduleParameterKind_PF_phsA_mag,
            @value(11)             ScheduleParameterKind_PF_phsB_mag,
            @value(12)             ScheduleParameterKind_PF_phsC_mag,
            @value(13)             ScheduleParameterKind_PhV_net_ang,
            @value(14)             ScheduleParameterKind_PhV_net_mag,
            @value(15)             ScheduleParameterKind_PhV_neut_ang,
            @value(16)             ScheduleParameterKind_PhV_neut_mag,
            @value(17)             ScheduleParameterKind_PhV_phsA_ang,
            @value(18)             ScheduleParameterKind_PhV_phsA_mag,
            @value(19)             ScheduleParameterKind_PhV_phsB_ang,
            @value(20)             ScheduleParameterKind_PhV_phsB_mag,
            @value(21)             ScheduleParameterKind_PhV_phsC_ang,
            @value(22)             ScheduleParameterKind_PhV_phsC_mag,
            @value(23)             ScheduleParameterKind_PPV_phsAB_ang,
            @value(24)             ScheduleParameterKind_PPV_phsAB_mag,
            @value(25)             ScheduleParameterKind_PPV_phsBC_ang,
            @value(26)             ScheduleParameterKind_PPV_phsBC_mag,
            @value(27)             ScheduleParameterKind_PPV_phsCA_ang,
            @value(28)             ScheduleParameterKind_PPV_phsCA_mag,
            @value(29)             ScheduleParameterKind_VA_net_mag,
            @value(30)             ScheduleParameterKind_VA_neut_mag,
            @value(31)             ScheduleParameterKind_VA_phsA_mag,
            @value(32)             ScheduleParameterKind_VA_phsB_mag,
            @value(33)             ScheduleParameterKind_VA_phsC_mag,
            @value(34)             ScheduleParameterKind_VAr_net_mag,
            @value(35)             ScheduleParameterKind_VAr_neut_mag,
            @value(36)             ScheduleParameterKind_VAr_phsA_mag,
            @value(37)             ScheduleParameterKind_VAr_phsB_mag,
            @value(38)             ScheduleParameterKind_VAr_phsC_mag,
            @value(39)             ScheduleParameterKind_W_net_mag,
            @value(40)             ScheduleParameterKind_W_neut_mag,
            @value(41)             ScheduleParameterKind_W_phsA_mag,
            @value(42)             ScheduleParameterKind_W_phsB_mag,
            @value(43)             ScheduleParameterKind_W_phsC_mag
        };
        enum SourceKind {
            @value(0)             SourceKind_process,
            @value(1)             SourceKind_substituted
        };
        enum StateKind {
            @value(2)             StateKind_standby,
            @value(0)             StateKind_off,
            @value(1)             StateKind_on
        };
        enum SwitchingCapabilityKind {
            @value(2)             SwitchingCapabilityKind_close,
            @value(3)             SwitchingCapabilityKind_open_and_close,
            @value(0)             SwitchingCapabilityKind_none,
            @value(1)             SwitchingCapabilityKind_open
        };
        enum TimeAccuracyKind {
            @value(14)             TimeAccuracyKind_T2,
            @value(10)             TimeAccuracyKind_T1,
            @value(16)             TimeAccuracyKind_T3,
            @value(18)             TimeAccuracyKind_T4,
            @value(20)             TimeAccuracyKind_T5,
            @value(0)             TimeAccuracyKind_UNDEFINED,
            @value(31)             TimeAccuracyKind_unspecified,
            @value(7)             TimeAccuracyKind_T0
        };
        enum UnitMultiplierKind {
            @value(2)             UnitMultiplierKind_centi,
            @value(3)             UnitMultiplierKind_deci,
            @value(4)             UnitMultiplierKind_Giga,
            @value(5)             UnitMultiplierKind_kilo,
            @value(8)             UnitMultiplierKind_milli,
            @value(6)             UnitMultiplierKind_Mega,
            @value(7)             UnitMultiplierKind_micro,
            @value(9)             UnitMultiplierKind_nano,
            @value(0)             UnitMultiplierKind_none,
            @value(10)             UnitMultiplierKind_pico,
            @value(11)             UnitMultiplierKind_Tera,
            @value(1)             UnitMultiplierKind_other
        };
        enum UnitSymbolKind {
            @value(5)             UnitSymbolKind_Amp,
            @value(9)             UnitSymbolKind_deg,
            @value(23)             UnitSymbolKind_degC,
            @value(279)             UnitSymbolKind_degF,
            @value(25)             UnitSymbolKind_Farad,
            @value(3)             UnitSymbolKind_gram,
            @value(160)             UnitSymbolKind_hour,
            @value(28)             UnitSymbolKind_Henry,
            @value(33)             UnitSymbolKind_Hz,
            @value(31)             UnitSymbolKind_Joule,
            @value(2)             UnitSymbolKind_meter,
            @value(41)             UnitSymbolKind_m2,
            @value(166)             UnitSymbolKind_m3,
            @value(159)             UnitSymbolKind_min,
            @value(500)             UnitSymbolKind_mph,
            @value(32)             UnitSymbolKind_Newton,
            @value(0)             UnitSymbolKind_none,
            @value(30)             UnitSymbolKind_ohm,
            @value(39)             UnitSymbolKind_Pa,
            @value(10)             UnitSymbolKind_rad,
            @value(53)             UnitSymbolKind_Siemens,
            @value(27)             UnitSymbolKind_sec,
            @value(29)             UnitSymbolKind_V,
            @value(61)             UnitSymbolKind_VA,
            @value(71)             UnitSymbolKind_VAh,
            @value(63)             UnitSymbolKind_VAr,
            @value(73)             UnitSymbolKind_VArh,
            @value(38)             UnitSymbolKind_W,
            @value(72)             UnitSymbolKind_Wh,
            @value(65)             UnitSymbolKind_wPerVA,
            @value(179)             UnitSymbolKind_wPerM2,
            @value(75)             UnitSymbolKind_hzPerS,
            @value(81)             UnitSymbolKind_wPerS,
            @value(100)             UnitSymbolKind_other,
            @value(106)             UnitSymbolKind_Ah
        };
        enum ValidityKind {
            @value(2)             ValidityKind_reserved,
            @value(3)             ValidityKind_questionable,
            @value(0)             ValidityKind_good,
            @value(1)             ValidityKind_invalid
        };
        typedef float FLOAT32;
        typedef double FLOAT64;
        typedef sequence<octet,2> HexBinary16;
        typedef long INT32;
        typedef unsigned long INT32U;
        typedef long long INT64;
        typedef unsigned long long INT64U;
        typedef long INT8;
        typedef string uuidType;
    }; /* module commonmodule */

    module essmodule {
        struct CapacityFirming;
        struct EssControlFSCC;
        struct ESSControlScheduleFSCH;
        struct ESSCSG;
        struct ESSEvent;
        struct ESSEventAndStatusZGEN;
        struct ESSEventProfile;
        struct EssEventZBAT;
        struct ESSEventZGEN;
        struct ESSFunction;
        struct ESSPoint;
        struct ESSPointStatus;
        struct ESSReading;
        struct ESSReadingProfile;
        struct ESSStatus;
        struct ESSStatusProfile;
        struct EssStatusZBAT;
        struct ESSStatusZGEN;
        struct FrequencyRegulation;
        struct PeakShaving;
        struct SocLimit;
        struct SOCManagement;
        struct VoltageDroop;
        struct VoltagePI;
        struct VoltageRegulation;
        struct ESSControl;
        struct ESSControlProfile;
    }; /* module essmodule */

    module generationmodule {
        struct DroopParameter;
        struct GeneratingUnit;
        struct GenerationControl;
        struct GenerationControlFSCC;
        struct GenerationControlProfile;
        struct GenerationControlScheduleFSCH;
        struct GenerationCSG;
        struct GenerationDiscreteControl;
        struct GenerationDiscreteControlProfile;
        struct GenerationEvent;
        struct GenerationEventAndStatusZGEN;
        struct GenerationEventZGEN;
        struct GenerationPoint;
        struct GenerationPointStatus;
        struct GenerationReading;
        struct GenerationStatus;
        struct GenerationStatusZGEN;
        struct ReactivePowerControl;
        struct RealPowerControl;
        struct GenerationReadingProfile;
        struct GenerationEventProfile;
        struct GenerationStatusProfile;
        enum ReactivePowerControlKind {
            @value(4)             ReactivePowerControlKind_reactivePower,
            @value(1)             ReactivePowerControlKind_advanced,
            @value(0)             ReactivePowerControlKind_UNDEFINED,
            @value(2)             ReactivePowerControlKind_droop,
            @value(5)             ReactivePowerControlKind_powerFactor,
            @value(3)             ReactivePowerControlKind_voltage
        };
        enum RealPowerControlKind {
            @value(2)             RealPowerControlKind_droop,
            @value(4)             RealPowerControlKind_realPower,
            @value(1)             RealPowerControlKind_advanced,
            @value(3)             RealPowerControlKind_isochronous,
            @value(0)             RealPowerControlKind_UNDEFINED
        };
    }; /* module generationmodule */

    module interconnectionmodule {
        struct InterconnectionControlScheduleFSCH;
        struct InterconnectionCSG;
        struct InterconnectionPoint;
        struct InterconnectionScheduleFSCC;
        struct InterconnectionSchedule;
        struct PlannedInterconnectionScheduleProfile;
        struct RequestedInterconnectionScheduleProfile;
    }; /* module interconnectionmodule */

    module loadmodule {
        struct LoadControl;
        struct LoadControlFSCC;
        struct LoadControlProfile;
        struct LoadControlScheduleFSCH;
        struct LoadCSG;
        struct LoadEvent;
        struct LoadEventAndStatusZGLD;
        struct LoadEventProfile;
        struct LoadEventZGLD;
        struct LoadPoint;
        struct LoadPointStatus;
        struct LoadReading;
        struct LoadReadingProfile;
        struct LoadStatus;
        struct LoadStatusProfile;
        struct LoadStatusZGLD;
    }; /* module loadmodule */

    module metermodule {
        struct MeterReading;
        struct MeterReadingProfile;
    }; /* module metermodule */

    module reclosermodule {
        struct Recloser;
        struct RecloserDiscreteControl;
        struct RecloserDiscreteControlProfile;
        struct RecloserDiscreteControlXCBR;
        struct RecloserEvent;
        struct RecloserEventProfile;
        struct RecloserReading;
        struct RecloserReadingProfile;
        struct RecloserStatus;
        struct RecloserStatusProfile;
    }; /* module reclosermodule */

    module regulatormodule {
        struct RegulatorControl;
        struct RegulatorControlATCC;
        struct RegulatorControlFSCC;
        struct RegulatorControlProfile;
        struct RegulatorControlScheduleFSCH;
        struct RegulatorCSG;
        struct RegulatorDiscreteControl;
        struct RegulatorDiscreteControlProfile;
        struct RegulatorEvent;
        struct RegulatorEventAndStatusANCR;
        struct RegulatorEventAndStatusATCC;
        struct RegulatorEventProfile;
        struct RegulatorPoint;
        struct RegulatorReading;
        struct RegulatorReadingProfile;
        struct RegulatorStatus;
        struct RegulatorStatusProfile;
        struct RegulatorSystem;
    }; /* module regulatormodule */

    module reservemodule {
        struct AllocatedMargin;
        struct ReserveAvailability;
        struct ReserveMargin;
        struct ReserveRequest;
        struct ReserveAvailabilityProfile;
        struct ReserveRequestProfile;
    }; /* module reservemodule */

    module resourcemodule {
        struct AnalogControlGGIO;
        struct BooleanControlGGIO;
        struct IntegerControlGGIO;
        struct ResourceDiscreteControl;
        struct ResourceDiscreteControlProfile;
        struct ResourceEvent;
        struct ResourceReading;
        struct ResourceReadingProfile;
        struct ResourceStatus;
        struct StringControlGGIO;
        struct ResourceEventProfile;
        struct ResourceStatusProfile;
    }; /* module resourcemodule */

    module solarmodule {
        struct SolarControl;
        struct SolarControlFSCC;
        struct SolarControlProfile;
        struct SolarControlScheduleFSCH;
        struct SolarCSG;
        struct SolarEvent;
        struct SolarEventAndStatusZGEN;
        struct SolarEventProfile;
        struct SolarEventZGEN;
        struct SolarInverter;
        struct SolarPoint;
        struct SolarPointStatus;
        struct SolarReading;
        struct SolarReadingProfile;
        struct SolarStatus;
        struct SolarStatusProfile;
        struct SolarStatusZGEN;
    }; /* module solarmodule */

    module switchmodule {
        struct ProtectedSwitch;
        struct SwitchDiscreteControl;
        struct SwitchDiscreteControlProfile;
        struct SwitchDiscreteControlXSWI;
        struct SwitchEvent;
        struct SwitchEventProfile;
        struct SwitchEventXSWI;
        struct SwitchReading;
        struct SwitchReadingProfile;
        struct SwitchStatus;
        struct SwitchStatusProfile;
        struct SwitchStatusXSWI;
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    struct FieldOptions {
        boolean option_parent_message;
        boolean option_required_field;
        openfmb::commonmodule::INT32 option_multiplicity_min;
        openfmb::commonmodule::INT32 option_multiplicity_max;
        boolean option_uuid;
        boolean option_key;
    };
    struct MessageOptions {
        boolean option_openfmb_profile;
    };
    module coordinationservicemodule {
        @nested(TRUE) 
        struct ENG_CoordinationServiceModeKind {
            openfmb::coordinationservicemodule::CoordinationServiceModeKind setVal;
            @optional            string setValExtension;
        };
    }; /* module coordinationservicemodule */

    module commonmodule {
        struct ACD {
            boolean general;
            openfmb::commonmodule::FaultDirectionKind dirGeneral;
            @optional            boolean phsA;
            @optional            openfmb::commonmodule::PhaseFaultDirectionKind dirPhsA;
            @optional            boolean phsB;
            @optional            openfmb::commonmodule::PhaseFaultDirectionKind dirPhsB;
            @optional            boolean phsC;
            @optional            openfmb::commonmodule::PhaseFaultDirectionKind dirPhsC;
            @optional            boolean neut;
            @optional            openfmb::commonmodule::PhaseFaultDirectionKind dirNeut;
        };
        @nested(TRUE) 
        struct ActivePower {
            @optional            openfmb::commonmodule::FLOAT32 value;
            @optional            openfmb::commonmodule::UnitSymbolKind unit;
            @optional            openfmb::commonmodule::UnitMultiplierKind multiplier;
        };
        @nested(TRUE) 
        struct CheckConditions {
            @optional            boolean synchroCheck;
            @optional            boolean interlockCheck;
        };
        struct ControlAPC {
            openfmb::commonmodule::FLOAT64 ctlVal;
        };
        @nested(TRUE) 
        struct ControlDPC {
            boolean ctlVal;
        };
        struct ControlINC {
            openfmb::commonmodule::INT32 ctlVal;
        };
        @nested(TRUE) 
        struct ControlISC {
            openfmb::commonmodule::INT32 ctlVal;
        };
        @nested(TRUE) 
        struct ControlSPC {
            boolean ctlVal;
        };
        @nested(TRUE) 
        struct ControlTimestamp {
            openfmb::commonmodule::INT64U seconds;
            openfmb::commonmodule::INT32U nanoseconds;
        };
        @nested(TRUE) 
        struct DateTimeInterval {
            @optional            UML_Extension::dateTime end;
            @optional            UML_Extension::dateTime start;
        };
        @nested(TRUE) 
        struct DetailQual {
            boolean overflow;
            boolean outOfRange;
            boolean badReference;
            boolean oscillatory;
            boolean failure;
            boolean oldData;
            boolean inconsistent;
            boolean inaccurate;
        };
        @nested(TRUE) 
        struct ENG_CalcMethodKind {
            openfmb::commonmodule::CalcMethodKind setVal;
        };
        @nested(TRUE) 
        struct ENG_GridConnectModeKind {
            openfmb::commonmodule::GridConnectModeKind setVal;
            @optional            string setValExtension;
        };
        @nested(TRUE) 
        struct ENG_PFSignKind {
            openfmb::commonmodule::PFSignKind setVal;
        };
        @nested(TRUE) 
        struct ENG_ScheduleParameter {
            openfmb::commonmodule::ScheduleParameterKind scheduleParameterType;
            openfmb::commonmodule::FLOAT64 value;
        };
        @nested(TRUE) 
        struct ENS_GridConnectModeKind {
            string stValExtension;
            openfmb::commonmodule::GridConnectModeKind stVal;
        };
        struct ENS_HealthKind {
            openfmb::commonmodule::HealthKind stVal;
            @optional            string d;
        };
        struct ENS_SwitchingCapabilityKind {
            openfmb::commonmodule::SwitchingCapabilityKind stVal;
            @optional            boolean blkEna;
        };
        @nested(TRUE) 
        struct IdentifiedObject {
            @optional            openfmb::commonmodule::uuidType mRID;
            @optional            string description;
            @optional            string name;
        };
        @nested(TRUE) 
        struct LogicalNode : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_LogicalNode;
        };
        @nested(TRUE) 
        struct LogicalNodeForControl : openfmb::commonmodule::LogicalNode {
            octet __dummy_prevent_empty_class_LogicalNodeForControl;
        };
        @nested(TRUE) 
        struct MeasurementValue : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_MeasurementValue;
        };
        @nested(TRUE) 
        struct NamedObject {
            @optional            string description;
            @optional            string name;
        };
        @nested(TRUE) 
        struct PhaseAPC {
            @optional            openfmb::commonmodule::ControlAPC phsA;
            @optional            openfmb::commonmodule::ControlAPC phsB;
            @optional            openfmb::commonmodule::ControlAPC phsC;
            @optional            openfmb::commonmodule::ControlAPC phs3;
        };
        @nested(TRUE) 
        struct PhaseDPC {
            @optional            openfmb::commonmodule::ControlDPC phsA;
            @optional            openfmb::commonmodule::ControlDPC phsB;
            @optional            openfmb::commonmodule::ControlDPC phsC;
            @optional            openfmb::commonmodule::ControlDPC phs3;
        };
        @nested(TRUE) 
        struct PhaseISC {
            @optional            openfmb::commonmodule::ControlISC phsA;
            @optional            openfmb::commonmodule::ControlISC phsB;
            @optional            openfmb::commonmodule::ControlISC phsC;
            @optional            openfmb::commonmodule::ControlISC phs3;
        };
        @nested(TRUE) 
        struct PhaseRecloseAction {
            @optional            openfmb::commonmodule::RecloseActionKind phsA;
            @optional            openfmb::commonmodule::RecloseActionKind phsB;
            @optional            openfmb::commonmodule::RecloseActionKind phsC;
            @optional            openfmb::commonmodule::RecloseActionKind phs3;
        };
        @nested(TRUE) 
        struct Quality {
            openfmb::commonmodule::ValidityKind validity;
            openfmb::commonmodule::DetailQual detailQual;
            openfmb::commonmodule::SourceKind source;
            boolean test;
            boolean operatorBlocked;
        };
        @nested(TRUE) 
        struct RampRate {
            @optional            openfmb::commonmodule::FLOAT32 positiveRealPowerKWPerMin;
            @optional            openfmb::commonmodule::FLOAT32 negativeRealPowerKWPerMin;
            @optional            openfmb::commonmodule::FLOAT32 positiveReactivePowerKVArPerMin;
            @optional            openfmb::commonmodule::FLOAT32 negativeReactivePowerKVArPerMin;
        };
        @nested(TRUE) 
        struct SchedulePoint {
            openfmb::commonmodule::ControlTimestamp startTime;
            sequence<openfmb::commonmodule::ENG_ScheduleParameter> scheduleParameter;
        };
        @nested(TRUE) 
        struct StatusValue : openfmb::commonmodule::IdentifiedObject {
            @optional            boolean modBlk;
        };
        @nested(TRUE) 
        struct SwitchPoint {
            openfmb::commonmodule::ControlTimestamp startTime;
            openfmb::commonmodule::ControlDPC Pos;
        };
        @nested(TRUE) 
        struct TimeQuality {
            openfmb::commonmodule::TimeAccuracyKind timeAccuracy;
            boolean clockFailure;
            boolean clockNotSynchronized;
            boolean leapSecondsKnown;
        };
        @nested(TRUE) 
        struct Timestamp {
            openfmb::commonmodule::INT64U seconds;
            openfmb::commonmodule::INT32U nanoseconds;
            @optional            openfmb::commonmodule::TimeQuality tq;
        };
        @nested(TRUE) 
        struct Unit {
            openfmb::commonmodule::UnitSymbolKind SIUnit;
            @optional            openfmb::commonmodule::UnitMultiplierKind multiplier;
        };
        @nested(TRUE) 
        struct Vector {
            openfmb::commonmodule::FLOAT64 mag;
            @optional            openfmb::commonmodule::FLOAT64 ang;
        };
        @nested(TRUE) 
        struct VSC {
            string ctlVal;
        };
        @nested(TRUE) 
        struct VSS {
            string stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
    }; /* module commonmodule */

    module essmodule {
        @nested(TRUE) 
        struct CapacityFirming {
            @optional            openfmb::commonmodule::FLOAT32 limitPositive_dp_dt;
            @optional            openfmb::commonmodule::FLOAT32 limitNegative_dp_dt;
            @optional            boolean capacityFirmingCtl;
        };
        @nested(TRUE) 
        struct FrequencyRegulation {
            @optional            openfmb::commonmodule::FLOAT32 frequencyDeadBandPlus;
            @optional            openfmb::commonmodule::FLOAT32 frequencySetPoint;
            @optional            openfmb::commonmodule::FLOAT32 frequencyDeadBandMinus;
            @optional            openfmb::commonmodule::FLOAT32 overFrequencyDroop;
            @optional            openfmb::commonmodule::FLOAT32 underFrequencyDroop;
            @optional            openfmb::commonmodule::FLOAT32 gridFrequencyStableBandPlus;
            @optional            openfmb::commonmodule::FLOAT32 gridFrequencyStableBandMinus;
            @optional            boolean frequencyRegulationCtl;
        };
        @nested(TRUE) 
        struct PeakShaving {
            @optional            openfmb::commonmodule::FLOAT32 baseShavingLimit;
            @optional            openfmb::commonmodule::FLOAT32 peakShavingLimit;
            @optional            openfmb::commonmodule::FLOAT32 socManagementAllowedHighLimit;
            @optional            openfmb::commonmodule::FLOAT32 socManagementAllowedLowLimit;
            @optional            boolean peakShavingCtl;
        };
        @nested(TRUE) 
        struct SocLimit {
            @optional            openfmb::commonmodule::FLOAT32 socHighLimit;
            @optional            openfmb::commonmodule::FLOAT32 socLowLimit;
            @optional            openfmb::commonmodule::FLOAT32 socHighLimitHysteresis;
            @optional            openfmb::commonmodule::FLOAT32 socLowLimitHysteresis;
            @optional            boolean socLimitCtl;
        };
        @nested(TRUE) 
        struct SOCManagement {
            @optional            openfmb::commonmodule::FLOAT32 socSetPoint;
            @optional            openfmb::commonmodule::FLOAT32 socDeadBandMinus;
            @optional            openfmb::commonmodule::FLOAT32 socDeadBandPlus;
            @optional            openfmb::commonmodule::FLOAT32 socPowerSetPoint;
            @optional            boolean socManagementCtl;
        };
        @nested(TRUE) 
        struct VoltageRegulation {
            @optional            openfmb::commonmodule::FLOAT32 voltageDeadBandPlus;
            @optional            openfmb::commonmodule::FLOAT32 voltageDeadBandMinus;
            @optional            openfmb::commonmodule::FLOAT32 voltageSetPoint;
            @optional            openfmb::commonmodule::FLOAT32 overVoltageDroop;
            @optional            openfmb::commonmodule::FLOAT32 underVoltageDroop;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct DroopParameter {
            @optional            openfmb::commonmodule::FLOAT32 unloadedOffset;
            @optional            openfmb::commonmodule::FLOAT32 slope;
        };
        @nested(TRUE) 
        struct GenerationPoint {
            openfmb::commonmodule::ControlTimestamp startTime;
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::ControlDPC blackStartEnabled;
            @optional            openfmb::commonmodule::ControlDPC transToIslndOnGridLossEnabled;
            @optional            openfmb::commonmodule::ControlDPC syncBackToGrid;
            @optional            openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reset;
            @optional            openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
            @optional            openfmb::commonmodule::FLOAT32 pctVDroop;
            @optional            openfmb::commonmodule::FLOAT32 pctHzDroop;
            @optional            openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
        };
        @nested(TRUE) 
        struct ReactivePowerControl {
            @optional            openfmb::generationmodule::ReactivePowerControlKind reactivePowerControlMode;
            @optional            openfmb::commonmodule::FLOAT32 voltageSetpoint;
            @optional            openfmb::commonmodule::FLOAT32 reactivePowerSetpoint;
            @optional            openfmb::generationmodule::DroopParameter droopSetpoint;
            @optional            openfmb::commonmodule::FLOAT32 powerFactorSetpoint;
        };
        @nested(TRUE) 
        struct RealPowerControl {
            @optional            openfmb::commonmodule::FLOAT32 isochronousSetpoint;
            @optional            openfmb::generationmodule::RealPowerControlKind realPowerControlMode;
            @optional            openfmb::commonmodule::FLOAT32 realPowerSetpoint;
            @optional            openfmb::generationmodule::DroopParameter droopSetpoint;
        };
    }; /* module generationmodule */

    module interconnectionmodule {
        @nested(TRUE) 
        struct InterconnectionPoint {
            openfmb::commonmodule::Timestamp startTime;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::ControlDPC blackStartEnabled;
            @optional            openfmb::commonmodule::ControlDPC island;
            @optional            openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::FLOAT32 pctVDroop;
            @optional            openfmb::commonmodule::FLOAT32 pctHzDroop;
            @optional            openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
        };
    }; /* module interconnectionmodule */

    module loadmodule {
        @nested(TRUE) 
        struct LoadPoint {
            openfmb::commonmodule::ControlTimestamp startTime;
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reset;
        };
    }; /* module loadmodule */

    module resourcemodule {
        @nested(TRUE) 
        struct AnalogControlGGIO : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
            openfmb::commonmodule::ControlAPC AnOut;
        };
        @nested(TRUE) 
        struct BooleanControlGGIO : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
            openfmb::commonmodule::ControlSPC SPCSO;
        };
        @nested(TRUE) 
        struct IntegerControlGGIO : openfmb::commonmodule::LogicalNode {
            openfmb::commonmodule::ControlINC ISCSO;
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
        };
        @nested(TRUE) 
        struct StringControlGGIO : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
            openfmb::commonmodule::VSC StrOut;
        };
    }; /* module resourcemodule */

    module solarmodule {
        @nested(TRUE) 
        struct SolarPoint {
            openfmb::commonmodule::ControlTimestamp startTime;
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind mode;
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reset;
            @optional            openfmb::commonmodule::FLOAT32 pctVDroop;
            @optional            openfmb::commonmodule::FLOAT32 pctHzDroop;
        };
    }; /* module solarmodule */

    module switchmodule {
        struct SwitchDiscreteControlXSWI : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::PhaseDPC Pos;
            @optional            openfmb::commonmodule::ControlSPC ResetProtectionPickup;
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module coordinationservicemodule {
        struct CoordinationControlDCSC : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::ControlDPC Island;
            @optional            openfmb::coordinationservicemodule::ENG_CoordinationServiceModeKind CoordinationServiceMode;
        };
    }; /* module coordinationservicemodule */

    module capbankmodule {
        struct CapBankControlYPSH {
            @optional            openfmb::commonmodule::PhaseDPC Pos;
        };
        struct CapBankDiscreteControlYPSH : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::PhaseDPC Pos;
        };
        @nested(TRUE) 
        struct CapBankPoint {
            openfmb::commonmodule::Timestamp startTime;
            @optional            openfmb::capbankmodule::CapBankControlYPSH control;
        };
    }; /* module capbankmodule */

    module commonmodule {
        struct ACDCTerminal : openfmb::commonmodule::IdentifiedObject {
            @optional            boolean connected;
            @optional            openfmb::commonmodule::INT32 sequenceNumber;
        };
        struct ApplicationSystem : openfmb::commonmodule::NamedObject {
            @key            openfmb::commonmodule::uuidType mRID;
        };
        @nested(TRUE) 
        struct ASG {
            openfmb::commonmodule::FLOAT64 setMag;
            @optional            openfmb::commonmodule::Unit units;
        };
        @nested(TRUE) 
        struct BCR {
            openfmb::commonmodule::INT64 actVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct CMV {
            openfmb::commonmodule::Vector cVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        struct ConductingEquipment : openfmb::commonmodule::NamedObject {
            @key            openfmb::commonmodule::uuidType mRID;
        };
        @nested(TRUE) 
        struct ControlING {
            openfmb::commonmodule::INT32 setVal;
            @optional            openfmb::commonmodule::Unit units;
        };
        @nested(TRUE) 
        struct ControlValue : openfmb::commonmodule::IdentifiedObject {
            @optional            boolean modBlk;
            @optional            boolean reset;
        };
        @nested(TRUE) 
        struct DEL {
            @optional            openfmb::commonmodule::CMV phsAB;
            @optional            openfmb::commonmodule::CMV phsBC;
            @optional            openfmb::commonmodule::CMV phsCA;
        };
        @nested(TRUE) 
        struct DiscreteControlXCBR : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::PhaseDPC Pos;
            @optional            openfmb::commonmodule::ControlINC ProtectionMode;
            @optional            openfmb::commonmodule::ControlSPC RecloseEnabled;
            @optional            openfmb::commonmodule::ControlSPC ResetProtectionPickup;
        };
        @nested(TRUE) 
        struct EnergyConsumer : openfmb::commonmodule::ConductingEquipment {
            @optional            string operatingLimit;
        };
        @nested(TRUE) 
        struct ENS_BehaviourModeKind {
            openfmb::commonmodule::BehaviourModeKind stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct ENS_DERGeneratorStateKind {
            openfmb::commonmodule::DERGeneratorStateKind stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct ENS_DynamicTestKind {
            openfmb::commonmodule::DynamicTestKind stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct ESS : openfmb::commonmodule::ConductingEquipment {
            octet __dummy_prevent_empty_class_ESS;
        };
        @nested(TRUE) 
        struct EventValue : openfmb::commonmodule::IdentifiedObject {
            @optional            boolean modBlk;
        };
        @nested(TRUE) 
        struct ForecastValue : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_ForecastValue;
        };
        @nested(TRUE) 
        struct ForecastValueSource : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_ForecastValueSource;
        };
        struct MessageInfo : openfmb::commonmodule::IdentifiedObject {
            openfmb::commonmodule::Timestamp messageTimeStamp;
        };
        @nested(TRUE) 
        struct Meter : openfmb::commonmodule::ConductingEquipment {
            octet __dummy_prevent_empty_class_Meter;
        };
        @nested(TRUE) 
        struct MV {
            openfmb::commonmodule::FLOAT64 mag;
            @optional            openfmb::commonmodule::Unit units;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        struct OptimizationMessageInfo : openfmb::commonmodule::MessageInfo {
            octet __dummy_prevent_empty_class_OptimizationMessageInfo;
        };
        @nested(TRUE) 
        struct PMG {
            @optional            openfmb::commonmodule::MV phsA;
            @optional            openfmb::commonmodule::MV phsB;
            @optional            openfmb::commonmodule::MV phsC;
            @optional            openfmb::commonmodule::MV net;
        };
        struct ReadingMessageInfo : openfmb::commonmodule::MessageInfo {
            octet __dummy_prevent_empty_class_ReadingMessageInfo;
        };
        @nested(TRUE) 
        struct ReadingMMTN : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::BCR TotVAh;
            @optional            openfmb::commonmodule::BCR TotWh;
            @optional            openfmb::commonmodule::BCR TotVArh;
            @optional            openfmb::commonmodule::BCR SupWh;
            @optional            openfmb::commonmodule::BCR SupVArh;
            @optional            openfmb::commonmodule::BCR DmdWh;
            @optional            openfmb::commonmodule::BCR DmdVAh;
            @optional            openfmb::commonmodule::BCR DmdVArh;
            @optional            openfmb::commonmodule::BCR SupVAh;
        };
        @nested(TRUE) 
        struct ReadingMMTR : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::BCR TotVAh;
            @optional            openfmb::commonmodule::BCR TotWh;
            @optional            openfmb::commonmodule::BCR TotVArh;
            @optional            openfmb::commonmodule::BCR SupWh;
            @optional            openfmb::commonmodule::BCR SupVArh;
            @optional            openfmb::commonmodule::BCR DmdWh;
            @optional            openfmb::commonmodule::BCR DmdVArh;
            @optional            openfmb::commonmodule::BCR SupVAh;
            @optional            openfmb::commonmodule::BCR DmdVAh;
        };
        @nested(TRUE) 
        struct ScheduleCSG {
            sequence<openfmb::commonmodule::SchedulePoint> schPts;
        };
        @nested(TRUE) 
        struct StatusDPS {
            @optional            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::DbPosKind stVal;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct StatusINC {
            openfmb::commonmodule::INT32 stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct StatusINS {
            openfmb::commonmodule::INT32 stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct StatusISC {
            openfmb::commonmodule::INT32 stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        struct StatusMessageInfo : openfmb::commonmodule::MessageInfo {
            octet __dummy_prevent_empty_class_StatusMessageInfo;
        };
        @nested(TRUE) 
        struct StatusSPC {
            boolean stVal;
            @optional            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct StatusSPS {
            @optional            openfmb::commonmodule::Quality q;
            boolean stVal;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct StringEventAndStatusGGIO : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
            openfmb::commonmodule::VSS StrIn;
        };
        @nested(TRUE) 
        struct SwitchCSG {
            sequence<openfmb::commonmodule::SwitchPoint> crvPts;
        };
        struct Terminal : openfmb::commonmodule::ACDCTerminal {
            @optional            openfmb::commonmodule::PhaseCodeKind phases;
        };
        @nested(TRUE) 
        struct WYE {
            @optional            openfmb::commonmodule::CMV phsA;
            @optional            openfmb::commonmodule::CMV phsB;
            @optional            openfmb::commonmodule::CMV phsC;
            @optional            openfmb::commonmodule::CMV neut;
            @optional            openfmb::commonmodule::CMV net;
        };
    }; /* module commonmodule */

    module essmodule {
        @nested(TRUE) 
        struct VoltageDroop {
            @optional            openfmb::essmodule::VoltageRegulation voltageRegulation;
            @optional            boolean voltageDroopCtl;
        };
        @nested(TRUE) 
        struct VoltagePI {
            @optional            openfmb::essmodule::VoltageRegulation voltageRegulation;
            @optional            boolean voltagePICtl;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct GeneratingUnit : openfmb::commonmodule::ConductingEquipment {
            @optional            openfmb::commonmodule::ActivePower maxOperatingP;
        };
        @nested(TRUE) 
        struct GenerationCSG {
            sequence<openfmb::generationmodule::GenerationPoint> crvPts;
        };
        @nested(TRUE) 
        struct GenerationDiscreteControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::generationmodule::RealPowerControl  RealPowerControl; 
            @optional openfmb::generationmodule::ReactivePowerControl  ReactivePowerControl; 
        };
        @nested(TRUE) 
        struct GenerationPointStatus {
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::StatusDPS blackStartEnabled;
            @optional            openfmb::commonmodule::StatusDPS transToIslndOnGridLossEnabled;
            @optional            openfmb::commonmodule::StatusDPS syncBackToGrid;
            @optional            openfmb::commonmodule::StatusDPS realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS frequencySetPointEnabled;
            @optional            openfmb::commonmodule::FLOAT32 pctVDroop;
            @optional            openfmb::commonmodule::FLOAT32 pctHzDroop;
            @optional            openfmb::commonmodule::StatusDPS voltageSetPointEnabled;
        };
    }; /* module generationmodule */

    module interconnectionmodule {
        @nested(TRUE) 
        struct InterconnectionCSG {
            sequence<openfmb::interconnectionmodule::InterconnectionPoint> crvPts;
        };
    }; /* module interconnectionmodule */

    module loadmodule {
        @nested(TRUE) 
        struct LoadCSG {
            sequence<openfmb::loadmodule::LoadPoint> crvPts;
        };
        @nested(TRUE) 
        struct LoadPointStatus {
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::StatusDPS realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS reset;
        };
    }; /* module loadmodule */

    module reclosermodule {
        @nested(TRUE) 
        struct Recloser : openfmb::commonmodule::ConductingEquipment {
            @optional            boolean normalOpen;
        };
        @nested(TRUE) 
        struct RecloserDiscreteControlXCBR : openfmb::commonmodule::DiscreteControlXCBR {
            octet __dummy_prevent_empty_class_RecloserDiscreteControlXCBR;
        };
    }; /* module reclosermodule */

    module regulatormodule {
        @nested(TRUE) 
        struct RegulatorControlATCC : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
            @optional            openfmb::commonmodule::PhaseAPC VolSpt;
            @optional            openfmb::commonmodule::PhaseISC TapPos;
            @optional            openfmb::commonmodule::ControlSPC ParOp;
            @optional            openfmb::commonmodule::ASG BndCtr;
            @optional            openfmb::commonmodule::ASG BndWid;
            @optional            openfmb::commonmodule::ControlING CtlDlTmms;
            @optional            openfmb::commonmodule::ASG LDCR;
            @optional            openfmb::commonmodule::ASG LDCX;
        };
        @nested(TRUE) 
        struct RegulatorDiscreteControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::regulatormodule::RegulatorControlATCC  regulatorControlATCC; 
        };
        @nested(TRUE) 
        struct RegulatorPoint {
            openfmb::commonmodule::Timestamp startTime;
            @optional            openfmb::regulatormodule::RegulatorControlATCC control;
        };
        @nested(TRUE) 
        struct RegulatorSystem : openfmb::commonmodule::ConductingEquipment {
            octet __dummy_prevent_empty_class_RegulatorSystem;
        };
    }; /* module regulatormodule */

    module reservemodule {
        @nested(TRUE) 
        struct ReserveMargin : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::PMG A;
            @optional            openfmb::commonmodule::PMG W;
            @optional            openfmb::commonmodule::PMG VAr;
            @optional            openfmb::commonmodule::PMG VA;
        };
        @nested(TRUE) 
        struct ReserveRequest {
            string requestID;
            @optional @shared openfmb::reservemodule::ReserveMargin  margin; 
            @optional openfmb::reservemodule::ReserveMargin  standbyMargin; 
        };
    }; /* module reservemodule */

    module resourcemodule {
        @nested(TRUE) 
        struct ResourceDiscreteControl : openfmb::commonmodule::IdentifiedObject {
            @optional            openfmb::commonmodule::CheckConditions check;
            sequence<openfmb::resourcemodule::StringControlGGIO>  stringControlGGIO;
            sequence<openfmb::resourcemodule::IntegerControlGGIO>  integerControlGGIO;
            sequence<openfmb::resourcemodule::BooleanControlGGIO>  booleanControlGGIO;
            sequence<openfmb::resourcemodule::AnalogControlGGIO>  analogControlGGIO;
        };
    }; /* module resourcemodule */

    module solarmodule {
        @nested(TRUE) 
        struct SolarCSG {
            sequence<openfmb::solarmodule::SolarPoint> crvPts;
        };
        @nested(TRUE) 
        struct SolarInverter : openfmb::commonmodule::ConductingEquipment {
            octet __dummy_prevent_empty_class_SolarInverter;
        };
        @nested(TRUE) 
        struct SolarPointStatus {
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind mode;
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::StatusDPS frequencySetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS voltageSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::FLOAT32 pctVDroop;
            @optional            openfmb::commonmodule::FLOAT32 pctHzDroop;
        };
    }; /* module solarmodule */

    module switchmodule {
        @nested(TRUE) 
        struct ProtectedSwitch : openfmb::commonmodule::ConductingEquipment {
            octet __dummy_prevent_empty_class_ProtectedSwitch;
        };
        @nested(TRUE) 
        struct SwitchDiscreteControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::switchmodule::SwitchDiscreteControlXSWI  switchDiscreteControlXSWI; 
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module coordinationservicemodule {
        @nested(TRUE) 
        struct CoordinationControl : openfmb::commonmodule::IdentifiedObject {
            @optional            openfmb::commonmodule::CheckConditions check;
            openfmb::coordinationservicemodule::CoordinationControlDCSC  coordinationControlDCSC;
        };
        struct CoordinationEventDCSC : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::StatusSPS Island;
            @optional            openfmb::coordinationservicemodule::ENG_CoordinationServiceModeKind CoordinationServiceMode;
            @optional            openfmb::commonmodule::StatusSPS PermissibleAuto;
            @optional            openfmb::commonmodule::StatusSPS PermissibleManual;
            @optional            openfmb::commonmodule::StatusSPS PermissibleNetzero;
            @optional            openfmb::commonmodule::StatusSPS PermissibleStart;
            @optional            openfmb::commonmodule::StatusSPS PermissibleStop;
        };
        struct CoordinationStatusDCSC : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::StatusSPS Island;
            @optional            openfmb::coordinationservicemodule::ENG_CoordinationServiceModeKind CoordinationServiceMode;
            @optional            openfmb::commonmodule::StatusSPS PermissibleAuto;
            @optional            openfmb::commonmodule::StatusSPS PermissibleManual;
            @optional            openfmb::commonmodule::StatusSPS PermissibleNetzero;
            @optional            openfmb::commonmodule::StatusSPS PermissibleStart;
            @optional            openfmb::commonmodule::StatusSPS PermissibleStop;
        };
    }; /* module coordinationservicemodule */

    module breakermodule {
        struct Breaker : openfmb::commonmodule::ConductingEquipment {
            octet __dummy_prevent_empty_class_Breaker;
        };
        @nested(TRUE) 
        struct BreakerDiscreteControlXCBR : openfmb::commonmodule::DiscreteControlXCBR {
            octet __dummy_prevent_empty_class_BreakerDiscreteControlXCBR;
        };
    }; /* module breakermodule */

    module capbankmodule {
        @nested(TRUE) 
        struct CapBankCSG {
            sequence<openfmb::capbankmodule::CapBankPoint> crvPts;
        };
        @nested(TRUE) 
        struct CapBankDiscreteControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::capbankmodule::CapBankDiscreteControlYPSH  capBankDiscreteControlYPSH; 
        };
        @nested(TRUE) 
        struct CapBankSystem : openfmb::commonmodule::ConductingEquipment {
            octet __dummy_prevent_empty_class_CapBankSystem;
        };
    }; /* module capbankmodule */

    module commonmodule {
        @nested(TRUE) 
        struct AnalogEventAndStatusGGIO : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
            openfmb::commonmodule::MV AnIn;
        };
        @nested(TRUE) 
        struct BooleanEventAndStatusGGIO : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
            openfmb::commonmodule::StatusSPS Ind;
        };
        @nested(TRUE) 
        struct ConductingEquipmentTerminalReading {
            openfmb::commonmodule::Terminal  terminal;
        };
        struct ControlMessageInfo : openfmb::commonmodule::MessageInfo {
            octet __dummy_prevent_empty_class_ControlMessageInfo;
        };
        @nested(TRUE) 
        struct ControlScheduleFSCH {
            openfmb::commonmodule::ScheduleCSG ValACSG;
        };
        struct EventMessageInfo : openfmb::commonmodule::MessageInfo {
            octet __dummy_prevent_empty_class_EventMessageInfo;
        };
        @nested(TRUE) 
        struct ForecastIED : openfmb::commonmodule::ForecastValueSource {
            string sourceApplicationID;
            UML_Extension::dateTime sourceDateTime;
        };
        @nested(TRUE) 
        struct IntegerEventAndStatusGGIO : openfmb::commonmodule::LogicalNode {
            openfmb::commonmodule::StatusINS IntIn;
            @optional            openfmb::commonmodule::PhaseCodeKind Phase;
        };
        @nested(TRUE) 
        struct LogicalNodeForEventAndStatus : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::ENS_BehaviourModeKind Beh;
            @optional            openfmb::commonmodule::ENS_HealthKind EEHealth;
            @optional            openfmb::commonmodule::StatusSPS HotLineTag;
            @optional            openfmb::commonmodule::StatusSPS RemoteBlk;
        };
        @nested(TRUE) 
        struct PhaseDPS {
            @optional            openfmb::commonmodule::StatusDPS phsA;
            @optional            openfmb::commonmodule::StatusDPS phsB;
            @optional            openfmb::commonmodule::StatusDPS phsC;
            @optional            openfmb::commonmodule::StatusDPS phs3;
        };
        @nested(TRUE) 
        struct PhaseINS {
            @optional            openfmb::commonmodule::StatusINS phsA;
            @optional            openfmb::commonmodule::StatusINS phsB;
            @optional            openfmb::commonmodule::StatusINS phsC;
            @optional            openfmb::commonmodule::StatusINS phs3;
        };
        @nested(TRUE) 
        struct PhaseMMTN {
            @optional            openfmb::commonmodule::ReadingMMTN phsA;
            @optional            openfmb::commonmodule::ReadingMMTN phsB;
            @optional            openfmb::commonmodule::ReadingMMTN phsC;
            @optional            openfmb::commonmodule::ReadingMMTN phsAB;
            @optional            openfmb::commonmodule::ReadingMMTN phsBC;
            @optional            openfmb::commonmodule::ReadingMMTN phsCA;
        };
        @nested(TRUE) 
        struct PhaseSPS {
            @optional            openfmb::commonmodule::StatusSPS phsA;
            @optional            openfmb::commonmodule::StatusSPS phsB;
            @optional            openfmb::commonmodule::StatusSPS phsC;
            @optional            openfmb::commonmodule::StatusSPS phs3;
        };
        @nested(TRUE) 
        struct ReadingMMXU : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::MV Hz;
            @optional            openfmb::commonmodule::DEL PPV;
            @optional            openfmb::commonmodule::ENG_CalcMethodKind ClcMth;
            @optional            openfmb::commonmodule::WYE PF;
            @optional            openfmb::commonmodule::WYE PhV;
            @optional            openfmb::commonmodule::WYE A;
            @optional            openfmb::commonmodule::ENG_PFSignKind PFSign;
            @optional            openfmb::commonmodule::WYE W;
            @optional            openfmb::commonmodule::WYE VAr;
            @optional            openfmb::commonmodule::WYE VA;
        };
        @nested(TRUE) 
        struct StatusAndEventXCBR : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::PhaseDPS Pos;
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
            @optional            openfmb::commonmodule::PhaseSPS RecloseEnabled;
            @optional            openfmb::commonmodule::ACD ProtectionPickup;
            @optional            openfmb::commonmodule::StatusINS ProtectionMode;
            @optional            openfmb::commonmodule::PhaseRecloseAction ReclosingAction;
        };
    }; /* module commonmodule */

    module essmodule {
        struct EssEventZBAT : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::StatusSPS BatHi;
            @optional            openfmb::commonmodule::StatusSPS BatLo;
            @optional            openfmb::commonmodule::MV Soc;
            @optional            openfmb::commonmodule::StatusSPS BatSt;
            @optional            openfmb::commonmodule::StatusSPS Stdby;
        };
        @nested(TRUE) 
        struct ESSFunction {
            @optional            openfmb::essmodule::FrequencyRegulation frequencyRegulation;
            @optional            openfmb::essmodule::PeakShaving peakShaving;
            @optional            openfmb::essmodule::SocLimit socLimit;
            @optional            openfmb::essmodule::SOCManagement socManagement;
            @optional            openfmb::essmodule::VoltageDroop voltageDroop;
            @optional            openfmb::essmodule::VoltagePI voltagePI;
            @optional            openfmb::essmodule::CapacityFirming capacityFirming;
        };
        @nested(TRUE) 
        struct ESSPoint {
            openfmb::commonmodule::ControlTimestamp startTime;
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind mode;
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::essmodule::ESSFunction function;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::ControlDPC blackStartEnabled;
            @optional            openfmb::commonmodule::ControlDPC transToIslndOnGridLossEnabled;
            @optional            openfmb::commonmodule::ControlDPC syncBackToGrid;
            @optional            openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC reset;
            @optional            openfmb::commonmodule::FLOAT32 pctVDroop;
            @optional            openfmb::commonmodule::FLOAT32 pctHzDroop;
            @optional            openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
            @optional            openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
        };
        @nested(TRUE) 
        struct ESSPointStatus {
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind mode;
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::essmodule::ESSFunction function;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::StatusDPS blackStartEnabled;
            @optional            openfmb::commonmodule::StatusDPS transToIslndOnGridLossEnabled;
            @optional            openfmb::commonmodule::StatusDPS syncBackToGrid;
            @optional            openfmb::commonmodule::StatusDPS realPwrSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS reactivePwrSetPointEnabled;
            @optional            openfmb::commonmodule::StatusDPS frequencySetPointEnabled;
            @optional            openfmb::commonmodule::FLOAT32 pctVDroop;
            @optional            openfmb::commonmodule::FLOAT32 pctHzDroop;
            @optional            openfmb::commonmodule::StatusDPS voltageSetPointEnabled;
        };
        struct ESSReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct ESSReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::essmodule::ESSReading  essReading;
            openfmb::commonmodule::ESS  ess;
        };
        struct EssStatusZBAT : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::StatusSPS BatSt;
            @optional            openfmb::commonmodule::StatusSPS Stdby;
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
            @optional            openfmb::commonmodule::MV Soc;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct GenerationControlScheduleFSCH {
            openfmb::generationmodule::GenerationCSG ValDCSG;
        };
        @nested(FALSE) 
        struct GenerationDiscreteControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::generationmodule::GenerationDiscreteControl  generationDiscreteControl;
            openfmb::generationmodule::GeneratingUnit  generatingUnit;
        };
        @nested(TRUE) 
        struct GenerationEventAndStatusZGEN : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::StatusSPS AuxPwrSt;
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
            @optional            openfmb::commonmodule::StatusSPS EmgStop;
            @optional            openfmb::commonmodule::StatusSPS GnSynSt;
            @optional            openfmb::generationmodule::GenerationPointStatus PointStatus;
        };
        @nested(TRUE) 
        struct GenerationEventZGEN : openfmb::generationmodule::GenerationEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_GenerationEventZGEN;
        };
        struct GenerationReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(TRUE) 
        struct GenerationStatusZGEN : openfmb::generationmodule::GenerationEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_GenerationStatusZGEN;
        };
        @nested(FALSE) 
        struct GenerationReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::generationmodule::GenerationReading  generationReading;
            openfmb::generationmodule::GeneratingUnit  generatingUnit;
        };
    }; /* module generationmodule */

    module interconnectionmodule {
        @nested(TRUE) 
        struct InterconnectionControlScheduleFSCH {
            openfmb::interconnectionmodule::InterconnectionCSG ValDCSG;
        };
    }; /* module interconnectionmodule */

    module loadmodule {
        @nested(TRUE) 
        struct LoadControlScheduleFSCH {
            openfmb::loadmodule::LoadCSG ValDCSG;
        };
        @nested(TRUE) 
        struct LoadEventAndStatusZGLD : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
            @optional            openfmb::commonmodule::StatusSPS EmgStop;
            @optional            openfmb::loadmodule::LoadPointStatus PointStatus;
        };
        @nested(TRUE) 
        struct LoadEventZGLD : openfmb::loadmodule::LoadEventAndStatusZGLD {
            octet __dummy_prevent_empty_class_LoadEventZGLD;
        };
        struct LoadReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct LoadReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::loadmodule::LoadReading  loadReading;
            openfmb::commonmodule::EnergyConsumer  energyConsumer;
        };
        @nested(TRUE) 
        struct LoadStatusZGLD : openfmb::loadmodule::LoadEventAndStatusZGLD {
            octet __dummy_prevent_empty_class_LoadStatusZGLD;
        };
    }; /* module loadmodule */

    module metermodule {
        struct MeterReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct MeterReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::metermodule::MeterReading  meterReading;
            openfmb::commonmodule::Meter  meter;
        };
    }; /* module metermodule */

    module reclosermodule {
        @nested(TRUE) 
        struct RecloserDiscreteControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::reclosermodule::RecloserDiscreteControlXCBR  recloserDiscreteControlXCBR; 
        };
        @nested(FALSE) 
        struct RecloserDiscreteControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::reclosermodule::RecloserDiscreteControl  recloserDiscreteControl;
            openfmb::reclosermodule::Recloser  recloser;
        };
        @nested(TRUE) 
        struct RecloserEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR; 
        };
        @nested(FALSE) 
        struct RecloserEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::reclosermodule::RecloserEvent  recloserEvent;
            openfmb::reclosermodule::Recloser  recloser;
        };
        struct RecloserReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMXU  diffReadingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct RecloserReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            sequence<openfmb::reclosermodule::RecloserReading,2>  recloserReading;
            openfmb::reclosermodule::Recloser  recloser;
        };
        @nested(TRUE) 
        struct RecloserStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR; 
        };
        @nested(FALSE) 
        struct RecloserStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::reclosermodule::RecloserStatus  recloserStatus;
            openfmb::reclosermodule::Recloser  recloser;
        };
    }; /* module reclosermodule */

    module regulatormodule {
        @nested(TRUE) 
        struct RegulatorCSG {
            sequence<openfmb::regulatormodule::RegulatorPoint> crvPts;
        };
        @nested(FALSE) 
        struct RegulatorDiscreteControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
            openfmb::regulatormodule::RegulatorDiscreteControl  regulatorDiscreteControl;
        };
        @nested(TRUE) 
        struct RegulatorEventAndStatusATCC {
            @optional            openfmb::commonmodule::StatusSPS TapOpErr;
            @optional            openfmb::commonmodule::StateKind state;
            @optional            openfmb::commonmodule::RampRate rampRates;
            @optional            openfmb::commonmodule::StatusSPC voltageSetPointEnabled;
            @optional            openfmb::commonmodule::PhaseAPC VolSpt;
            @optional            openfmb::commonmodule::StatusINC StDlTmms;
            @optional            openfmb::commonmodule::PhaseINS TapPos;
            @optional            openfmb::commonmodule::StatusSPS ParOp;
            @optional            openfmb::commonmodule::ASG BndCtr;
            @optional            openfmb::commonmodule::ASG BndWid;
            @optional            openfmb::commonmodule::ASG LDCR;
            @optional            openfmb::commonmodule::ASG LDCX;
        };
        struct RegulatorReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct RegulatorReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
            sequence<openfmb::regulatormodule::RegulatorReading,2>  regulatorReading;
        };
    }; /* module regulatormodule */

    module reservemodule {
        @nested(TRUE) 
        struct AllocatedMargin {
            string requestID;
            @optional openfmb::reservemodule::ReserveMargin  allocatedStandbyMargin; 
            @optional openfmb::reservemodule::ReserveMargin  allocatedMargin; 
        };
        @nested(TRUE) 
        struct ReserveAvailability {
            @optional @shared openfmb::reservemodule::ReserveMargin  margin; 
            @optional openfmb::reservemodule::ReserveMargin  standbyMargin; 
            @optional openfmb::reservemodule::ReserveMargin  incrementalMargin; 
        };
        @nested(FALSE) 
        struct ReserveAvailabilityProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::reservemodule::ReserveAvailability  reserveAvailability;
            @optional openfmb::reservemodule::AllocatedMargin  allocatedMargin; 
            openfmb::commonmodule::ConductingEquipment  tiePoint;
            openfmb::commonmodule::ApplicationSystem  responderCircuitSegmentService;
            openfmb::commonmodule::ApplicationSystem  requesterCircuitSegmentService;
        };
        @nested(FALSE) 
        struct ReserveRequestProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::reservemodule::ReserveRequest  reserveRequest;
            openfmb::commonmodule::ConductingEquipment  tiePoint;
            openfmb::commonmodule::ApplicationSystem  requesterCircuitSegmentService;
            openfmb::commonmodule::ApplicationSystem  responderCircuitSegmentService;
        };
    }; /* module reservemodule */

    module resourcemodule {
        @nested(FALSE) 
        struct ResourceDiscreteControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::resourcemodule::ResourceDiscreteControl  resourceDiscreteControl;
            openfmb::commonmodule::ConductingEquipment  conductingEquipment;
        };
        @nested(TRUE) 
        struct ResourceEvent : openfmb::commonmodule::IdentifiedObject {
            sequence<openfmb::commonmodule::StringEventAndStatusGGIO>  stringEventAndStatusGGIO;
            sequence<openfmb::commonmodule::IntegerEventAndStatusGGIO>  integerEventAndStatusGGIO;
            sequence<openfmb::commonmodule::BooleanEventAndStatusGGIO>  booleanEventAndStatusGGIO;
            sequence<openfmb::commonmodule::AnalogEventAndStatusGGIO>  analogEventAndStatusGGIO;
        };
        struct ResourceReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct ResourceReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::resourcemodule::ResourceReading  resourceReading;
            openfmb::commonmodule::ConductingEquipment  conductingEquipment;
        };
        @nested(TRUE) 
        struct ResourceStatus : openfmb::commonmodule::IdentifiedObject {
            sequence<openfmb::commonmodule::StringEventAndStatusGGIO>  stringEventAndStatusGGIO;
            sequence<openfmb::commonmodule::IntegerEventAndStatusGGIO>  integerEventAndStatusGGIO;
            sequence<openfmb::commonmodule::BooleanEventAndStatusGGIO>  booleanEventAndStatusGGIO;
            sequence<openfmb::commonmodule::AnalogEventAndStatusGGIO>  analogEventAndStatusGGIO;
        };
        @nested(FALSE) 
        struct ResourceEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::resourcemodule::ResourceEvent  resourceEvent;
            openfmb::commonmodule::ConductingEquipment  conductingEquipment;
        };
        @nested(FALSE) 
        struct ResourceStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::resourcemodule::ResourceStatus  resourceStatus;
            openfmb::commonmodule::ConductingEquipment  conductingEquipment;
        };
    }; /* module resourcemodule */

    module solarmodule {
        @nested(TRUE) 
        struct SolarControlScheduleFSCH {
            openfmb::solarmodule::SolarCSG ValDCSG;
        };
        @nested(TRUE) 
        struct SolarEventAndStatusZGEN : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::StatusSPS AuxPwrSt;
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
            @optional            openfmb::commonmodule::StatusSPS EmgStop;
            @optional            openfmb::solarmodule::SolarPointStatus PointStatus;
        };
        struct SolarEventZGEN : openfmb::solarmodule::SolarEventAndStatusZGEN {
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
        };
        struct SolarReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct SolarReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::solarmodule::SolarReading  solarReading;
            openfmb::solarmodule::SolarInverter  solarInverter;
        };
        struct SolarStatusZGEN : openfmb::solarmodule::SolarEventAndStatusZGEN {
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
        };
    }; /* module solarmodule */

    module switchmodule {
        @nested(FALSE) 
        struct SwitchDiscreteControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::switchmodule::SwitchDiscreteControl  switchDiscreteControl;
            openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
        };
        @nested(TRUE) 
        struct SwitchEventXSWI : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::PhaseDPS Pos;
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
        };
        struct SwitchReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  diffReadingMMXU; 
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct SwitchReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            sequence<openfmb::switchmodule::SwitchReading,2>  switchReading;
            openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
        };
        @nested(TRUE) 
        struct SwitchStatusXSWI : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
            @optional            openfmb::commonmodule::PhaseDPS Pos;
            openfmb::commonmodule::PhaseSPS ProtectionPickup;
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module coordinationservicemodule {
        @nested(FALSE) 
        struct CoordinationControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::commonmodule::ApplicationSystem  applicationSystem;
            openfmb::coordinationservicemodule::CoordinationControl  coordinationControl;
        };
        @nested(TRUE) 
        struct CoordinationEvent : openfmb::commonmodule::IdentifiedObject {
            openfmb::coordinationservicemodule::CoordinationEventDCSC  coordinationEventDCSC;
        };
        @nested(FALSE) 
        struct CoordinationEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::commonmodule::ApplicationSystem  applicationSystem;
            openfmb::coordinationservicemodule::CoordinationEvent  coordinationEvent;
        };
        @nested(TRUE) 
        struct CoordinationStatus : openfmb::commonmodule::IdentifiedObject {
            openfmb::coordinationservicemodule::CoordinationStatusDCSC  coordinationStatusDCSC;
        };
        @nested(FALSE) 
        struct CoordinationStatusProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::commonmodule::ApplicationSystem  applicationSystem;
            openfmb::coordinationservicemodule::CoordinationStatus  coordinationStatus;
        };
    }; /* module coordinationservicemodule */

    module breakermodule {
        @nested(TRUE) 
        struct BreakerDiscreteControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::breakermodule::BreakerDiscreteControlXCBR  breakerDiscreteControlXCBR; 
        };
        @nested(FALSE) 
        struct BreakerDiscreteControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::breakermodule::BreakerDiscreteControl  breakerDiscreteControl;
            openfmb::breakermodule::Breaker  breaker;
        };
        @nested(TRUE) 
        struct BreakerEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR; 
        };
        @nested(FALSE) 
        struct BreakerEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::breakermodule::BreakerEvent  breakerEvent;
            openfmb::breakermodule::Breaker  breaker;
        };
        @nested(TRUE) 
        struct BreakerReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::ReadingMMXU  diffReadingMMXU; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
        };
        @nested(FALSE) 
        struct BreakerReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            sequence<openfmb::breakermodule::BreakerReading,2>  breakerReading;
            openfmb::breakermodule::Breaker  breaker;
        };
        struct BreakerReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
        };
        @nested(TRUE) 
        struct BreakerStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR; 
        };
        @nested(FALSE) 
        struct BreakerStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::breakermodule::BreakerStatus  breakerStatus;
            openfmb::breakermodule::Breaker  breaker;
        };
    }; /* module breakermodule */

    module capbankmodule {
        @nested(TRUE) 
        struct CapBankControlScheduleFSCH {
            openfmb::capbankmodule::CapBankCSG ValCSG;
        };
        @nested(FALSE) 
        struct CapBankDiscreteControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::capbankmodule::CapBankSystem  capBankSystem;
            openfmb::capbankmodule::CapBankDiscreteControl  capBankControl;
        };
        struct CapBankEventAndStatusYPSH : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::PhaseDPS Pos;
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
        };
        struct CapBankReading : openfmb::commonmodule::ConductingEquipmentTerminalReading {
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
        @nested(FALSE) 
        struct CapBankReadingProfile : openfmb::commonmodule::ReadingMessageInfo {
            openfmb::capbankmodule::CapBankSystem  capBankSystem;
            openfmb::capbankmodule::CapBankReading  capBankReading;
        };
        @nested(TRUE) 
        struct CapBankStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::capbankmodule::CapBankEventAndStatusYPSH  capBankEventAndStatusYPSH; 
        };
        @nested(FALSE) 
        struct CapBankStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::capbankmodule::CapBankSystem  capBankSystem;
            openfmb::capbankmodule::CapBankStatus  capBankStatus;
        };
    }; /* module capbankmodule */

    module commonmodule {
        @nested(TRUE) 
        struct ControlFSCC : openfmb::commonmodule::LogicalNodeForControl {
            @optional openfmb::commonmodule::ControlScheduleFSCH  islandControlScheduleFSCH; 
            @optional openfmb::commonmodule::ControlScheduleFSCH  controlScheduleFSCH; 
        };
    }; /* module commonmodule */

    module essmodule {
        @nested(TRUE) 
        struct ESSCSG {
            sequence<openfmb::essmodule::ESSPoint> crvPts;
        };
        @nested(TRUE) 
        struct ESSEventAndStatusZGEN : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::StatusSPS GnSynSt;
            @optional            openfmb::commonmodule::StatusSPS AuxPwrSt;
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
            @optional            openfmb::commonmodule::StatusSPS EmgStop;
            @optional            openfmb::essmodule::ESSPointStatus PointStatus;
        };
        @nested(TRUE) 
        struct ESSEventZGEN : openfmb::essmodule::ESSEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_ESSEventZGEN;
        };
        @nested(TRUE) 
        struct ESSStatusZGEN : openfmb::essmodule::ESSEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_ESSStatusZGEN;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct GenerationControlFSCC : openfmb::commonmodule::ControlFSCC {
            @optional openfmb::generationmodule::GenerationControlScheduleFSCH  GenerationControlScheduleFSCH; 
        };
        @nested(TRUE) 
        struct GenerationEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::generationmodule::GenerationEventZGEN  generationEventZGEN; 
        };
        @nested(TRUE) 
        struct GenerationStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::generationmodule::GenerationStatusZGEN  generationStatusZGEN; 
        };
        @nested(FALSE) 
        struct GenerationEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::generationmodule::GenerationEvent  generationEvent;
            openfmb::generationmodule::GeneratingUnit  generatingUnit;
        };
        @nested(FALSE) 
        struct GenerationStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::generationmodule::GenerationStatus  generationStatus;
            openfmb::generationmodule::GeneratingUnit  generatingUnit;
        };
    }; /* module generationmodule */

    module interconnectionmodule {
        struct InterconnectionScheduleFSCC : openfmb::commonmodule::ControlFSCC {
            sequence<openfmb::interconnectionmodule::InterconnectionControlScheduleFSCH>  interconnectionControlScheduleFSCH;
        };
        @nested(TRUE) 
        struct InterconnectionSchedule : openfmb::commonmodule::IdentifiedObject {
            @optional            openfmb::commonmodule::CheckConditions check;
            openfmb::interconnectionmodule::InterconnectionScheduleFSCC  interconnectionScheduleFSCC;
        };
        @nested(FALSE) 
        struct PlannedInterconnectionScheduleProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::interconnectionmodule::InterconnectionSchedule  interconnectionSchedule;
            openfmb::commonmodule::ConductingEquipment  tiePoint;
            openfmb::commonmodule::ApplicationSystem  requesterCircuitSegmentService;
            openfmb::commonmodule::ApplicationSystem  responderCircuitSegmentService;
        };
        @nested(FALSE) 
        struct RequestedInterconnectionScheduleProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::interconnectionmodule::InterconnectionSchedule  interconnectionSchedule;
            openfmb::commonmodule::ConductingEquipment  tiePoint;
            openfmb::commonmodule::ApplicationSystem  requesterCircuitSegmentService;
            openfmb::commonmodule::ApplicationSystem  responderCircuitSegmentService;
        };
    }; /* module interconnectionmodule */

    module loadmodule {
        struct LoadControlFSCC : openfmb::commonmodule::ControlFSCC {
            @optional openfmb::loadmodule::LoadControlScheduleFSCH  loadControlScheduleFSCH; 
        };
        @nested(TRUE) 
        struct LoadEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::loadmodule::LoadEventZGLD  loadEventZGLD; 
        };
        @nested(FALSE) 
        struct LoadEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::loadmodule::LoadEvent  loadEvent;
            openfmb::commonmodule::EnergyConsumer  energyConsumer;
        };
        @nested(TRUE) 
        struct LoadStatus : openfmb::commonmodule::StatusValue {
            @optional            boolean isUncontrollable;
            @optional openfmb::loadmodule::LoadStatusZGLD  loadStatusZGLD; 
        };
        @nested(FALSE) 
        struct LoadStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::loadmodule::LoadStatus  loadStatus;
            openfmb::commonmodule::EnergyConsumer  energyConsumer;
        };
    }; /* module loadmodule */

    module regulatormodule {
        @nested(TRUE) 
        struct RegulatorControlScheduleFSCH {
            openfmb::regulatormodule::RegulatorCSG ValDCSG;
        };
        @nested(TRUE) 
        struct RegulatorEventAndStatusANCR : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::regulatormodule::RegulatorEventAndStatusATCC PointStatus;
            @optional            openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
        };
        @nested(TRUE) 
        struct RegulatorStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::regulatormodule::RegulatorEventAndStatusANCR  regulatorEventAndStatusANCR; 
        };
        @nested(FALSE) 
        struct RegulatorStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
            openfmb::regulatormodule::RegulatorStatus  regulatorStatus;
        };
    }; /* module regulatormodule */

    module solarmodule {
        struct SolarControlFSCC : openfmb::commonmodule::ControlFSCC {
            @optional openfmb::solarmodule::SolarControlScheduleFSCH  SolarControlScheduleFSCH; 
        };
        @nested(TRUE) 
        struct SolarEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::solarmodule::SolarEventZGEN  solarEventZGEN; 
        };
        @nested(FALSE) 
        struct SolarEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::solarmodule::SolarInverter  solarInverter;
            openfmb::solarmodule::SolarEvent  solarEvent;
        };
        @nested(TRUE) 
        struct SolarStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::solarmodule::SolarStatusZGEN  solarStatusZGEN; 
        };
        @nested(FALSE) 
        struct SolarStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::solarmodule::SolarStatus  solarStatus;
            openfmb::solarmodule::SolarInverter  solarInverter;
        };
    }; /* module solarmodule */

    module switchmodule {
        @nested(TRUE) 
        struct SwitchEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::switchmodule::SwitchEventXSWI  switchEventXSWI; 
        };
        @nested(FALSE) 
        struct SwitchEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::switchmodule::SwitchEvent  switchEvent;
            openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
        };
        @nested(TRUE) 
        struct SwitchStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::switchmodule::SwitchStatusXSWI  switchStatusXSWI; 
        };
        @nested(FALSE) 
        struct SwitchStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::switchmodule::SwitchStatus  switchStatus;
            openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module capbankmodule {
        @nested(TRUE) 
        struct CapBankControlFSCC : openfmb::commonmodule::ControlFSCC {
            @optional openfmb::capbankmodule::CapBankControlScheduleFSCH  capBankControlScheduleFSCH; 
        };
        @nested(TRUE) 
        struct CapBankEvent : openfmb::commonmodule::EventValue {
            @optional @shared openfmb::capbankmodule::CapBankEventAndStatusYPSH  CapBankEventAndStatusYPSH; 
        };
        @nested(FALSE) 
        struct CapBankEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::capbankmodule::CapBankSystem  capBankSystem;
            openfmb::capbankmodule::CapBankEvent  capBankEvent;
        };
    }; /* module capbankmodule */

    module essmodule {
        @nested(TRUE) 
        struct ESSControlScheduleFSCH {
            openfmb::essmodule::ESSCSG ValDCSG;
        };
        @nested(TRUE) 
        struct ESSEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::essmodule::ESSEventZGEN  essEventZGEN; 
            @optional openfmb::essmodule::EssEventZBAT  essEventZBAT; 
        };
        @nested(FALSE) 
        struct ESSEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::essmodule::ESSEvent  essEvent;
            openfmb::commonmodule::ESS  ess;
        };
        @nested(TRUE) 
        struct ESSStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::essmodule::ESSStatusZGEN  essStatusZGEN; 
            @optional openfmb::essmodule::EssStatusZBAT  essStatusZBAT; 
        };
        @nested(FALSE) 
        struct ESSStatusProfile : openfmb::commonmodule::StatusMessageInfo {
            openfmb::essmodule::ESSStatus  essStatus;
            openfmb::commonmodule::ESS  ess;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct GenerationControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::generationmodule::GenerationControlFSCC  generationControlFSCC; 
        };
        @nested(FALSE) 
        struct GenerationControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::generationmodule::GenerationControl  generationControl;
            openfmb::generationmodule::GeneratingUnit  generatingUnit;
        };
    }; /* module generationmodule */

    module loadmodule {
        @nested(TRUE) 
        struct LoadControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::loadmodule::LoadControlFSCC  loadControlFSCC; 
        };
        @nested(FALSE) 
        struct LoadControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::loadmodule::LoadControl  loadControl;
            openfmb::commonmodule::EnergyConsumer  energyConsumer;
        };
    }; /* module loadmodule */

    module regulatormodule {
        @nested(TRUE) 
        struct RegulatorControlFSCC : openfmb::commonmodule::ControlFSCC {
            @optional openfmb::regulatormodule::RegulatorControlScheduleFSCH  regulatorControlScheduleFSCH; 
        };
        @nested(TRUE) 
        struct RegulatorEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::regulatormodule::RegulatorEventAndStatusANCR  regulatorEventAndStatusANCR; 
        };
        @nested(FALSE) 
        struct RegulatorEventProfile : openfmb::commonmodule::EventMessageInfo {
            openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
            openfmb::regulatormodule::RegulatorEvent  regulatorEvent;
        };
    }; /* module regulatormodule */

    module solarmodule {
        @nested(TRUE) 
        struct SolarControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::solarmodule::SolarControlFSCC  solarControlFSCC; 
        };
        @nested(FALSE) 
        struct SolarControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::solarmodule::SolarInverter  solarInverter;
            openfmb::solarmodule::SolarControl  solarControl;
        };
    }; /* module solarmodule */

}; /* module openfmb */

module openfmb {
    module capbankmodule {
        @nested(TRUE) 
        struct CapBankControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::capbankmodule::CapBankControlFSCC  capBankControlFSCC; 
        };
        @nested(FALSE) 
        struct CapBankControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::capbankmodule::CapBankSystem  capBankSystem;
            openfmb::capbankmodule::CapBankControl  capBankControl;
        };
    }; /* module capbankmodule */

    module essmodule {
        struct EssControlFSCC : openfmb::commonmodule::ControlFSCC {
            @optional openfmb::essmodule::ESSControlScheduleFSCH  essControlScheduleFSCH; 
        };
        @nested(TRUE) 
        struct ESSControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::essmodule::EssControlFSCC  essControlFSCC; 
        };
        @nested(FALSE) 
        struct ESSControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::essmodule::ESSControl  essControl;
            openfmb::commonmodule::ESS  ess;
        };
    }; /* module essmodule */

    module regulatormodule {
        @nested(TRUE) 
        struct RegulatorControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::regulatormodule::RegulatorControlFSCC  regulatorControlFSCC; 
        };
        @nested(FALSE) 
        struct RegulatorControlProfile : openfmb::commonmodule::ControlMessageInfo {
            openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
            openfmb::regulatormodule::RegulatorControl  regulatorControl;
        };
    }; /* module regulatormodule */

}; /* module openfmb */

